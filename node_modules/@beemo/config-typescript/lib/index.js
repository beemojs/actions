'use strict';

const _process$beemo = process.beemo,
      context = _process$beemo.context,
      tool = _process$beemo.tool;
const _tool$config$settings = tool.config.settings,
      decorators = _tool$config$settings.decorators,
      react = _tool$config$settings.react; // Do NOT set include, exclude, etc, since they cannot be overridden
// because of Beemo's array merging strategy. Requires consumers to set.

const config = require('tsconfig-beemo/tsconfig.json');

const options = config.compilerOptions; // When using project references, we must merge the 2 configs instead of replacing,
// otherwise the `tsconfig.options.json` separation that Beemo automates... breaks.

if (tool.package.workspaces) {
  Object.assign(options, require('tsconfig-beemo/tsconfig.workspaces.json').compilerOptions);
}

if (decorators) {
  options.experimentalDecorators = true;
}

if (react) {
  if (options.lib) {
    options.lib.push('dom');
  } else {
    options.lib = ['dom'];
  }

  if (react === 'automatic') {
    options.jsx = process.env.NODE_ENV !== "production" ? 'react-jsx-dev' : 'react-jsx';
  } else {
    var _tool$package$depende;

    options.jsx = (_tool$package$depende = tool.package.dependencies) !== null && _tool$package$depende !== void 0 && _tool$package$depende['react-native'] ? 'react-native' : 'react';
  }
}

if (context.getRiskyOption('sourceMaps')) {
  options.sourceMap = true;
}

module.exports = config;
//# sourceMappingURL=index.js.map
