'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

Object.defineProperty(exports, '__esModule', {
  value: true
});

const execa = require('execa');

const event = require('@boost/event');

const plugin = require('@boost/plugin');

const isClassInstance = require('./helpers/isClassInstance.js');

function _interopDefault(e) {
  return e && e.__esModule ? e : {
    'default': e
  };
}

const execa__default = /*#__PURE__*/_interopDefault(execa);

class Script extends plugin.Plugin {
  constructor(...args) {
    super(...args);
    this.tool = void 0;
    this.onBeforeExecute = new event.ConcurrentEvent('before-execute');
    this.onAfterExecute = new event.ConcurrentEvent('after-execute');
    this.onFailedExecute = new event.ConcurrentEvent('failed-execute');
  }

  static validate(script) {
    const name = isClassInstance.isClassInstance(script) && script.constructor.name || 'Script';

    if (typeof script.parse !== 'function') {
      throw new TypeError(`\`${name}\` requires a \`parse()\` method.`);
    }

    if (typeof script.execute !== 'function') {
      throw new TypeError(`\`${name}\` requires an \`execute()\` method.`);
    }
  }

  blueprint(preds) {
    return {};
  }

  bootstrap() {}

  startup(tool) {
    this.tool = tool;
    this.bootstrap();
  }
  /**
   * Define a configuration object to parse args with.
   */


  parse() {
    return {
      // @ts-expect-error Allow this
      options: {}
    };
  }
  /**
   * Execute a command with the given arguments and pass the results through a promise.
   */


  async executeCommand(command, args, options = {})
  /* infer */
  {
    return execa__default["default"](command, args, _objectSpread({
      extendEnv: true,
      preferLocal: true,
      stdio: 'inherit'
    }, options));
  }
  /**
   * Execute the script with the context and parsed args.
   */


}

exports.Script = Script;
//# sourceMappingURL=Script.js.map
