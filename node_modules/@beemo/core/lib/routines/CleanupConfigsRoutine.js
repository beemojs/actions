'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

const _rollupPluginBabelHelpers = require('../_virtual/_rollupPluginBabelHelpers.js');

const fs = require('fs-extra');

const common = require('@boost/common');

const internal = require('@boost/internal');

const pipeline = require('@boost/pipeline');

function _interopDefault(e) {
  return e && e.__esModule ? e : {
    'default': e
  };
}

const fs__default = /*#__PURE__*/_interopDefault(fs);

var _dec, _class;

let CleanupConfigsRoutine = (_dec = common.Bind(), (_class = class CleanupConfigsRoutine extends pipeline.Routine {
  blueprint({
    instance
  }) {
    return {
      tool: instance().required().notNullable()
    };
  }

  async execute(context) {
    return this.createWaterfallPipeline(context).pipe(this.options.tool.msg('app:configCleanup'), this.deleteConfigFiles).run();
  }
  /**
   * Delete all temporary config files.
   */


  async deleteConfigFiles(context) {
    await Promise.all(context.configPaths.map(config => {
      this.debug('Deleting config file %s', internal.color.filePath(config.path));
      this.options.tool.driverRegistry.get(config.driver).onDeleteConfigFile.emit([context, config.path]);
      return fs__default["default"].remove(config.path.path());
    }));
  }

}, _rollupPluginBabelHelpers.applyDecoratedDescriptor(_class.prototype, "deleteConfigFiles", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "deleteConfigFiles"), _class.prototype), _class));
exports.CleanupConfigsRoutine = CleanupConfigsRoutine;
//# sourceMappingURL=CleanupConfigsRoutine.js.map
