'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

Object.defineProperty(exports, '__esModule', {
  value: true
});

const constants = require('../constants.js');

const filterArgs = require('../helpers/filterArgs.js');

const ExecuteCommandRoutine = require('./driver/ExecuteCommandRoutine.js');

const RunInWorkspacesRoutine = require('./RunInWorkspacesRoutine.js');

class RunDriverRoutine extends RunInWorkspacesRoutine.RunInWorkspacesRoutine {
  pipeRoutine(context, packageName, packageRoot) {
    if (packageName) {
      this.pipeParallelBuilds(context, packageName, {
        forceConfigOption: true,
        packageRoot
      });
    } else {
      this.pipeParallelBuilds(context, context.primaryDriver.getName());
    }
  }
  /**
   * When a parallel pipe "//" is defined, we need to create an additional routine
   * for each instance.
   */


  pipeParallelBuilds(context, key, options = {}) {
    const argv = context.argv,
          parallelArgv = context.parallelArgv,
          primaryDriver = context.primaryDriver;

    const _filterArgs$filterArg = filterArgs.filterArgs(argv, {
      block: constants.EXECUTE_OPTIONS
    }),
          filteredArgv = _filterArgs$filterArg.filteredArgv; // Remove the driver name from `beemo <name>` since it
    // gets passed through and will crash the child process


    if (filteredArgv[0] === primaryDriver.getName()) {
      filteredArgv.shift();
    }

    const command = `${primaryDriver.metadata.bin} ${filteredArgv.join(' ')}`.trim();
    this.routines.push(new ExecuteCommandRoutine.ExecuteCommandRoutine(key, command, _objectSpread(_objectSpread({}, options), {}, {
      argv: filteredArgv,
      tool: this.options.tool
    })));
    parallelArgv.forEach(pargv => {
      this.routines.push(new ExecuteCommandRoutine.ExecuteCommandRoutine(key, `${command} ${pargv.join(' ')}`.trim(), _objectSpread(_objectSpread({}, options), {}, {
        additionalArgv: pargv,
        argv: filteredArgv,
        tool: this.options.tool
      })));
    });
  }

}

exports.RunDriverRoutine = RunDriverRoutine;
//# sourceMappingURL=RunDriverRoutine.js.map
