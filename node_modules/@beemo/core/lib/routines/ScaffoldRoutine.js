'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

const _rollupPluginBabelHelpers = require('../_virtual/_rollupPluginBabelHelpers.js');

const hygen = require('hygen');

const common = require('@boost/common');

const internal = require('@boost/internal');

const pipeline = require('@boost/pipeline');

var _dec, _class;

let ScaffoldRoutine = (_dec = common.Bind(), (_class = class ScaffoldRoutine extends pipeline.Routine {
  constructor(...args) {
    super(...args);

    this.handleExec = (action, input) => this.executeCommand(action, [], {
      input,
      preferLocal: true,
      shell: true
    });

    this.handlePrompter = () => ({
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      prompt: () => Promise.resolve({
        overwrite: true
      })
    });
  }

  blueprint({
    instance
  }) {
    return {
      tool: instance().required().notNullable()
    };
  }

  async execute(context) {
    return this.createWaterfallPipeline(context).pipe(this.options.tool.msg('app:scaffoldRunGenerator'), this.runGenerator).run();
  }
  /**
   * Execute the hygen scaffolding generator.
   */


  async runGenerator(context) {
    const tool = this.options.tool;
    const args = [context.generator, context.action];
    const templates = tool.getConfigModuleRoot().append('templates').path();
    this.debug('Scaffolding %s:%s templates from %s', internal.color.symbol(context.generator), internal.color.symbol(context.action), internal.color.filePath(templates));

    try {
      await hygen.engine(args, {
        createPrompter: this.handlePrompter,
        cwd: tool.cwd.path(),
        debug: tool.config.debug,
        exec: this.handleExec,
        logger: new hygen.Logger(console.log),
        templates
      });
    } catch (error) {
      // Intercept hygen error to provide a better error message
      if (common.instanceOf(error, Error) && error.message.startsWith("I can't find action")) {
        throw new Error(tool.msg('errors:scaffoldNoTemplates', {
          path: args.join('/')
        }));
      }

      throw error;
    }
  }
  /**
   * Handle shell executions from hygen.
   */


}, _rollupPluginBabelHelpers.applyDecoratedDescriptor(_class.prototype, "runGenerator", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "runGenerator"), _class.prototype), _class));
exports.ScaffoldRoutine = ScaffoldRoutine;
//# sourceMappingURL=ScaffoldRoutine.js.map
