'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

const stream = require('stream');
/* eslint-disable promise/prefer-await-to-callbacks */


const WAIT_THRESHOLD = 500;

class BatchStream extends stream.Transform {
  constructor(options = {}) {
    var _options$wait;

    super();
    this.bufferedBatch = null;
    this.timeout = null;
    this.waitThreshold = 0;
    this.waitThreshold = (_options$wait = options.wait) !== null && _options$wait !== void 0 ? _options$wait : WAIT_THRESHOLD;
  }

  flush() {
    if (this.bufferedBatch) {
      this.push(this.bufferedBatch);
      this.bufferedBatch = null;
    }

    if (this.timeout) {
      clearTimeout(this.timeout);
      this.timeout = null;
    }
  }

  _transform(chunk, encoding, callback) {
    this.bufferedBatch = this.bufferedBatch ? Buffer.concat([this.bufferedBatch, chunk]) : chunk;

    if (this.timeout) {
      clearTimeout(this.timeout);
    }

    this.timeout = setTimeout(() => {
      this.flush();
    }, this.waitThreshold);
    callback();
  }

  _flush(callback) {
    this.flush();
    callback();
  }

}

exports.BatchStream = BatchStream;
//# sourceMappingURL=BatchStream.js.map
