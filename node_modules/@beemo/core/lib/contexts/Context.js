'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

Object.defineProperty(exports, '__esModule', {
  value: true
});

const camelCase = require('lodash/camelCase');

const trim = require('lodash/trim');

const pipeline = require('@boost/pipeline');

function _interopDefault(e) {
  return e && e.__esModule ? e : {
    'default': e
  };
}

const camelCase__default = /*#__PURE__*/_interopDefault(camelCase);

const trim__default = /*#__PURE__*/_interopDefault(trim);

class Context extends pipeline.Context {
  // Parsed command line arguments as an object
  // Raw command line arguments as a list of strings
  // List of driver configs currently registered
  // Current working directory
  // Absolute path to the configuration module
  // Absolute path to the folder containing `package.json` (Yarn workspaces) or `lerna.json`
  // List of paths (with trailing glob star) for each defined workspace
  constructor(args, argv = []) {
    super();
    this.args = void 0;
    this.argv = void 0;
    this.configPaths = [];
    this.cwd = void 0;
    this.configModuleRoot = void 0;
    this.workspaceRoot = void 0;
    this.workspaces = [];
    this.args = args;
    this.argv = argv;
  }
  /**
   * Add a config path for the defined driver.
   */


  addConfigPath(driverName, path) {
    this.configPaths.push({
      driver: driverName,
      path
    });
    return this;
  }
  /**
   * Add an option argument to both the args object and argv list.
   * If the option is not supported, it will be added to the unknown options object.
   */


  addOption(arg, defaultValue = true, useEquals = false) {
    let option = arg;
    let value = defaultValue;
    let equals = useEquals;

    if (option.includes('=')) {
      var _option$split = option.split('=');

      var _option$split2 = _slicedToArray(_option$split, 2);

      option = _option$split2[0];
      value = _option$split2[1];
      equals = true;
    }

    let name = trim__default["default"](option, '-');

    if (name.startsWith('no-')) {
      name = name.slice(3);
      value = false;
    }

    const optName = camelCase__default["default"](name);

    if (optName in this.args.options) {
      // @ts-expect-error Allow this
      this.args.options[optName] = value;
    } else {
      this.args.unknown[optName] = String(value);
    }

    if (typeof value === 'boolean' || !value) {
      this.argv.push(option);
    } else if (equals) {
      this.argv.push(`${option}=${value}`);
    } else {
      this.argv.push(option, String(value));
    }

    return this;
  }
  /**
   * Add multiple boolean option arguments.
   */


  addOptions(args) {
    args.forEach(arg => {
      this.addOption(arg);
    });
    return this;
  }
  /**
   * Add a parameter to the argv list.
   */


  addParam(arg) {
    this.args.params.push(arg);
    this.argv.push(arg);
    return this;
  }
  /**
   * Add multiple parameters.
   */


  addParams(args) {
    args.forEach(arg => {
      this.addParam(arg);
    });
    return this;
  }
  /**
   * Find a configuration path by file name.
   */


  findConfigByName(name) {
    return this.configPaths.find(config => String(config.path).endsWith(name) || config.driver === name);
  }
  /**
   * Return a configured option value by name, or a fallback value if not found.
   */


  getOption(name) {
    var _this$args$options$na;

    return (_this$args$options$na = this.args.options[name]) !== null && _this$args$options$na !== void 0 ? _this$args$options$na : null;
  }
  /**
   * Return either a configured option value, or an unknown option value,
   * or null if not found.
   */


  getRiskyOption(name, raw = false) {
    var _opt;

    let opt = this.getOption(name);

    if (opt !== null) {
      return opt;
    }

    opt = this.args.unknown[name]; // Unknown options without a value (`--foo`) are set with an empty string.
    // Technically the option exists and is truthy, but to avoid falsy checks,
    // let's convert an empty string to true since it's equivalent to a flag.

    if ((opt === '' || opt === 'true') && !raw) {
      opt = true;
    }

    return (_opt = opt) !== null && _opt !== void 0 ? _opt : null;
  }

}

exports.Context = Context;
//# sourceMappingURL=Context.js.map
