import { Blueprint, Path, Predicates } from '@boost/common';
import { Routine } from '@boost/pipeline';
import { ConfigContext } from '../contexts/ConfigContext';
import { RoutineOptions } from '../types';
import { CreateConfigRoutine } from './CreateConfigRoutine';
export declare class ResolveConfigsRoutine<Ctx extends ConfigContext = ConfigContext> extends Routine<Path[], unknown, RoutineOptions> {
    blueprint({ instance }: Predicates): Blueprint<RoutineOptions>;
    execute(context: Ctx): Promise<Path[]>;
    /**
     * Pipe a routine for every driver we need to create a configuration for,
     * and then run in parallel.
     */
    setupConfigFiles(context: Ctx): CreateConfigRoutine<ConfigContext<{}>>[];
    /**
     * Recursively loop through an driver's dependencies, adding a dependenct driver for each,
     * starting from the primary driver (the command that initiated the process).
     */
    resolveDependencies(context: Ctx): void;
}
//# sourceMappingURL=ResolveConfigsRoutine.d.ts.map