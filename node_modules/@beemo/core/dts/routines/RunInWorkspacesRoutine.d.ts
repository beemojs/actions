import { Blueprint, Predicates, WorkspacePackage } from '@boost/common';
import { Routine } from '@boost/pipeline';
import { Context } from '../contexts/Context';
import { RoutineOptions } from '../types';
export declare type AnyRoutine = Routine<any, any>;
export interface RunInWorkspacesContextArgs {
    concurrency: number;
    graph: boolean;
    workspaces: string;
}
export declare abstract class RunInWorkspacesRoutine<Ctx extends Context<RunInWorkspacesContextArgs>> extends Routine<unknown, unknown, RoutineOptions> {
    routines: AnyRoutine[];
    workspacePackages: WorkspacePackage[];
    blueprint({ instance }: Predicates): Blueprint<RoutineOptions>;
    execute(context: Ctx): Promise<unknown>;
    /**
     * When a list of errors are available, concatenate them and throw a new error.
     */
    formatAndThrowErrors(errors: Error[]): void;
    /**
     * Return a list of workspaces optionally filtered.
     */
    getFilteredWorkspacePackages(context: Ctx): WorkspacePackage[];
    /**
     * Return the initial value for the pipeline.
     */
    getInitialValue(context: Ctx): unknown;
    /**
     * Group routines in order of which they are dependend on.
     */
    orderByWorkspacePriorityGraph(context: Ctx): AnyRoutine[][];
    /**
     * Pipe a routine for the entire project or a workspace package at the defined path.
     */
    abstract pipeRoutine(context: Ctx, packageName?: string, packageRoot?: string): void;
}
//# sourceMappingURL=RunInWorkspacesRoutine.d.ts.map