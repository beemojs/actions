import { Blueprint, Predicates } from '@boost/common';
import { Routine } from '@boost/pipeline';
import { ScriptContext } from '../../contexts/ScriptContext';
import { Script } from '../../Script';
import { RoutineOptions } from '../../types';
export interface ExecuteScriptOptions extends RoutineOptions {
    packageRoot?: string;
}
export declare class ExecuteScriptRoutine extends Routine<unknown, Script, ExecuteScriptOptions> {
    blueprint({ instance, string }: Predicates): Blueprint<ExecuteScriptOptions>;
    /**
     * Run the script while also parsing arguments to use as options.
     *
     * When a script is ran in multiple workspace packages, each context should have a different root,
     * but we can't modify the context without changing the reference across all packages.
     * So create a new context, copy over the old properties, and set the new root.
     */
    execute(oldContext: ScriptContext, script: Script): Promise<unknown>;
}
//# sourceMappingURL=ExecuteScriptRoutine.d.ts.map