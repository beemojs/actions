import { Blueprint, Path, Predicates } from '@boost/common';
import { Routine } from '@boost/pipeline';
import { ConfigContext } from '../contexts/ConfigContext';
import { Driver } from '../Driver';
import { ConfigObject, RoutineOptions } from '../types';
export interface CreateConfigOptions extends RoutineOptions {
    driver: Driver;
}
export declare class CreateConfigRoutine<Ctx extends ConfigContext> extends Routine<Path, unknown, CreateConfigOptions> {
    blueprint({ instance }: Predicates): Blueprint<CreateConfigOptions>;
    execute(context: Ctx): Promise<Path>;
    /**
     * Copy configuration file from module.
     */
    copyConfigFile(context: Ctx): Promise<Path>;
    /**
     * Create a temporary configuration file or pass as an option.
     */
    createConfigFile(context: Ctx, config: ConfigObject): Promise<Path>;
    /**
     * Create a configuration file for the defined driver based on a custom template
     * provided by the consumer.
     */
    createConfigFileFromTemplate(context: Ctx, configs: ConfigObject[]): Promise<Path>;
    /**
     * Return an absolute file path for a config file in either the consumer or provider.
     */
    getConfigPath({ cwd, workspaceRoot }: Ctx, fromConsumer?: boolean): Path | null;
    /**
     * Merge multiple configuration sources using the current driver.
     */
    mergeConfigs(context: Ctx, configs: ConfigObject[]): Promise<ConfigObject>;
    /**
     * Load a config file with passing the args and tool to the file.
     */
    loadConfigAtPath(filePath: Path): ConfigObject;
    /**
     * Load config from the consumer / local overrides.
     */
    loadConfigFromConsumer(context: Ctx, prevConfigs: ConfigObject[]): Promise<ConfigObject[]>;
    /**
     * Load config from the provider / configuration module.
     */
    loadConfigFromProvider(context: Ctx, prevConfigs: ConfigObject[]): Promise<ConfigObject[]>;
    /**
     * Reference configuration file from module using a require statement.
     */
    referenceConfigFile(context: Ctx): Promise<Path>;
    /**
     * Set environment variables defined by the driver.
     */
    setEnvVars(context: Ctx, configs: ConfigObject[]): ConfigObject[];
}
//# sourceMappingURL=CreateConfigRoutine.d.ts.map