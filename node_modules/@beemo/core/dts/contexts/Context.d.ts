import { PrimitiveType } from '@boost/args';
import { FilePath, Path } from '@boost/common';
import { Context as BaseContext } from '@boost/pipeline';
import { Arguments, Argv } from '../types';
export interface ConfigPath {
    driver: string;
    path: Path;
}
export declare class Context<O extends object = {}, P extends PrimitiveType[] = PrimitiveType[]> extends BaseContext {
    args: Arguments<O, P>;
    argv: Argv;
    configPaths: ConfigPath[];
    cwd: Path;
    configModuleRoot: Path;
    workspaceRoot: Path;
    workspaces: FilePath[];
    constructor(args: Arguments<O, P>, argv?: Argv);
    /**
     * Add a config path for the defined driver.
     */
    addConfigPath(driverName: string, path: Path): this;
    /**
     * Add an option argument to both the args object and argv list.
     * If the option is not supported, it will be added to the unknown options object.
     */
    addOption(arg: string, defaultValue?: PrimitiveType, useEquals?: boolean): this;
    /**
     * Add multiple boolean option arguments.
     */
    addOptions(args: string[]): this;
    /**
     * Add a parameter to the argv list.
     */
    addParam(arg: string): this;
    /**
     * Add multiple parameters.
     */
    addParams(args: string[]): this;
    /**
     * Find a configuration path by file name.
     */
    findConfigByName(name: string): ConfigPath | undefined;
    /**
     * Return a configured option value by name, or a fallback value if not found.
     */
    getOption<K extends keyof O>(name: K): O[K] | null;
    /**
     * Return either a configured option value, or an unknown option value,
     * or null if not found.
     */
    getRiskyOption(name: string, raw?: boolean): PrimitiveType | null;
}
//# sourceMappingURL=Context.d.ts.map