/// <reference types="jest" />
import execa from 'execa';
import { ArgList, Arguments, Argv } from '@boost/args';
import { Path } from '@boost/common';
import { mockDebugger } from '@boost/debug/test';
import { ConfigContext, ConfigFile, Context, Driver, DriverContext, DriverContextOptions, DriverMetadata, ScaffoldContext, ScaffoldContextOptions, Script, ScriptContext, ScriptContextOptions, Tool } from '.';
export { mockDebugger };
export declare class TestDriver<O extends object = {}> extends Driver<O> {
    readonly name = "test-driver";
}
export declare class TestScript<O extends object = {}> extends Script<O> {
    readonly name = "test-script";
    execute(): any;
}
export declare function mockConsole<K extends keyof Console>(name: K): jest.SpyInstance;
export declare function mockToolConfig(): ConfigFile;
export declare function mockTool(argv?: Argv): Tool;
export declare function mockDriver<C extends object = {}>(name: string, tool?: Tool | null, metadata?: Partial<DriverMetadata>): Driver<C>;
export declare function mockScript(name: string, tool?: Tool | null): Script<{}>;
export declare function stubArgs<T extends object>(options: T, params?: ArgList): Arguments<T>;
export declare function stubConfigArgs(): Arguments<{}>;
export declare function stubDriverArgs(fields?: Partial<DriverContextOptions>): Arguments<DriverContextOptions>;
export declare function stubScaffoldArgs(fields?: Partial<ScaffoldContextOptions>): Arguments<ScaffoldContextOptions>;
export declare function stubScriptArgs(fields?: Partial<ScriptContextOptions>): Arguments<ScriptContextOptions>;
export declare function applyContext<T extends Context>(context: T): T;
export declare function stubConfigContext(): ConfigContext;
export declare function stubDriverContext(driver?: Driver): DriverContext;
export declare function stubScriptContext(script?: Script): ScriptContext;
export declare function stubScaffoldContext(generator?: string, action?: string, name?: string): ScaffoldContext;
export declare function prependRoot(part: string): Path;
export declare function getRoot(): Path;
export declare function stubExecResult(fields?: Partial<execa.ExecaReturnValue>): execa.ExecaReturnValue;
//# sourceMappingURL=test.d.ts.map