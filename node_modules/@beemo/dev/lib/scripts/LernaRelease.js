'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const core = require('@beemo/core');

class LernaRelease extends core.Script {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", 'beemo-script-lerna-release');

    _defineProperty(this, "npmClient", 'npx');
  }

  parse() {
    return {
      options: {
        changelogPreset: {
          default: 'beemo',
          description: 'Conventional changelog preset to use for release generation',
          type: 'string'
        },
        graduate: {
          description: 'Graduate prereleases to an official stable version',
          type: 'boolean'
        },
        preid: {
          default: 'alpha',
          description: 'Suffix identifier to append to prerelease versions',
          type: 'string'
        },
        prerelease: {
          description: 'Mark this release as a prerelease and append suffix',
          type: 'boolean'
        }
      }
    };
  }

  async execute(context, args) {
    var _args$options$changel;

    if (core.Path.resolve('yarn.lock', context.cwd).exists()) {
      this.npmClient = 'yarn';
    }

    const preid = args.options.prerelease ? args.options.preid : undefined;
    this.checkForGitHubToken();

    if (process.env.CI) {
      await this.setGitEnvVars();
    }

    await this.versionPackages((_args$options$changel = args.options.changelogPreset) !== null && _args$options$changel !== void 0 ? _args$options$changel : 'beemo', args.options.graduate, preid);
    await this.publishPackages(preid);
  } // Required to create GitHub releases


  checkForGitHubToken() {
    if (process.env.GITHUB_TOKEN) {
      process.env.GH_TOKEN = process.env.GITHUB_TOKEN;
    }

    if (!process.env.GH_TOKEN) {
      throw new Error('Release requires a GH_TOKEN environment variable.');
    }
  } // https://git-scm.com/book/en/v2/Git-Internals-Environment-Variables


  async setGitEnvVars() {
    let name = '';
    let email = '';

    try {
      const gitName = await this.executeCommand('git', ['config', '--get', 'user.name']);

      if (gitName.stdout) {
        name = gitName.stdout;
      }

      const gitEmail = await this.executeCommand('git', ['config', '--get', 'user.email']);

      if (gitEmail.stdout) {
        email = gitEmail.stdout;
      }
    } catch {
      var _process$env$GITHUB_U, _process$env$GITHUB_E;

      name = (_process$env$GITHUB_U = process.env.GITHUB_USER) !== null && _process$env$GITHUB_U !== void 0 ? _process$env$GITHUB_U : 'gh-actions';
      email = (_process$env$GITHUB_E = process.env.GITHUB_EMAIL) !== null && _process$env$GITHUB_E !== void 0 ? _process$env$GITHUB_E : 'actions@github.com';
    }

    Object.assign(process.env, {
      GIT_ASKPASS: 'echo',
      GIT_AUTHOR_EMAIL: email,
      GIT_AUTHOR_NAME: name,
      GIT_COMMITTER_EMAIL: email,
      GIT_COMMITTER_NAME: name,
      GIT_TERMINAL_PROMPT: '0'
    });
  } // https://github.com/lerna/lerna/tree/master/commands/version#readme


  async versionPackages(preset, graduate, preid) {
    const changelogPreset = preset.startsWith('conventional-changelog') ? preset : `conventional-changelog-${preset}`;
    const args = ['lerna', 'version', // Only run on master
    '--allow-branch', 'master', // Create a GitHub release
    '--create-release', 'github', // Push changes to git
    '--push', // Alter commit message to skip CI
    '--message', '"Release"', // Use conventional commits
    '--conventional-commits', '--changelog-preset', changelogPreset];

    if (graduate) {
      args.push('--conventional-graduate');
    } else if (preid) {
      args.push('--conventional-prerelease', '--preid', preid);
    }

    await this.executeCommand(this.npmClient, args);
  } // https://github.com/lerna/lerna/tree/master/commands/publish#readme


  async publishPackages(preid) {
    const args = ['lerna', 'publish', 'from-git'];

    if (preid) {
      args.push('--dist-tag', 'next', '--preid', preid);
    }

    await this.executeCommand(this.npmClient, args);
  }

}

const LernaRelease$1 = () => new LernaRelease();

module.exports = LernaRelease$1;
//# sourceMappingURL=LernaRelease.js.map
