'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

Object.defineProperty(exports, '__esModule', {
  value: true
});

const React = require('react');

const ink = require('ink');

const react = require('@boost/cli/react');

const pipeline = require('@boost/pipeline');

const setup = require('../setup.js');

const RoutineRow = require('./RoutineRow.js');

const TaskRow = require('./TaskRow.js');

function _interopDefault(e) {
  return e && e.__esModule ? e : {
    'default': e
  };
}

const React__default = /*#__PURE__*/_interopDefault(React);

function App({
  pipeline: pipeline$1,
  outputStrategy
}) {
  const _react$useProgram = react.useProgram(),
        exit = _react$useProgram.exit;

  const _React$useState = React.useState(new Set()),
        _React$useState2 = _slicedToArray(_React$useState, 2),
        workUnits = _React$useState2[0],
        setWorkUnits = _React$useState2[1];

  const _React$useState3 = React.useState([]),
        _React$useState4 = _slicedToArray(_React$useState3, 2),
        finishedRoutines = _React$useState4[0],
        setFinishedRoutines = _React$useState4[1];

  const clearLoop = react.useRenderLoop();
  const strategy = outputStrategy !== null && outputStrategy !== void 0 ? outputStrategy : setup.tool.config.execute.output; // Monitor for pipeline updates

  const handleRunWorkUnit = React.useCallback(workUnit => {
    setWorkUnits(prev => {
      const set = new Set(prev);
      set.add(workUnit);
      return set;
    });
  }, []);
  const handleFinishWorkUnit = React.useCallback(workUnit => {
    if (workUnit instanceof pipeline.Routine && workUnit.depth === 0) {
      setFinishedRoutines(prev => [...prev, workUnit]);
    }

    setWorkUnits(prev => {
      const set = new Set(prev);
      set.delete(workUnit);
      return set;
    });
  }, []);
  React.useEffect(() => {
    const monitor = new pipeline.Monitor();
    monitor.onWorkUnitRun.listen(handleRunWorkUnit);
    monitor.onWorkUnitPass.listen(handleFinishWorkUnit);
    monitor.onWorkUnitFail.listen(handleFinishWorkUnit);
    monitor.monitor(pipeline$1);
  }, [handleRunWorkUnit, handleFinishWorkUnit, pipeline$1]); // Start the pipeline on mount

  React.useEffect(() => {
    async function run() {
      try {
        await pipeline$1.run();
      } catch (error) {
        exit(error);
      } finally {
        clearLoop();
      }
    }

    void run();
  }, [clearLoop, exit, pipeline$1]); // Hide Beemo output but not driver output

  if (strategy === 'none' || strategy === 'stream') {
    return null;
  } // Group based on type


  const routines = [...workUnits].filter(unit => unit instanceof pipeline.Routine && !unit.isSkipped());
  const tasks = new Map();
  workUnits.forEach(unit => {
    if (unit instanceof pipeline.Task && unit.isRunning) {
      // Similar tasks that are run in parallel may have the same ID,
      // but we only want to display one of them, so index by ID.
      tasks.set(unit.id, unit);
    }
  });
  return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(ink.Static, {
    items: finishedRoutines
  }, routine => /*#__PURE__*/React__default["default"].createElement(RoutineRow.RoutineRow, {
    key: `static-${routine.id}-${routine.key}`,
    routine: routine
  })), /*#__PURE__*/React__default["default"].createElement(ink.Box, {
    flexDirection: "column"
  }, routines.map(routine => /*#__PURE__*/React__default["default"].createElement(RoutineRow.RoutineRow, {
    key: `routine-${routine.id}-${routine.key}`,
    routine: routine
  })), [...tasks].map(([id, task]) => /*#__PURE__*/React__default["default"].createElement(TaskRow.TaskRow, {
    key: `task-${id}-${task.title}`,
    outputStrategy: strategy,
    task: task
  }))));
}

exports.App = App;
//# sourceMappingURL=App.js.map
