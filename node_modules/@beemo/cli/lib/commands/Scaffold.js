'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

const _rollupPluginBabelHelpers = require('../_virtual/_rollupPluginBabelHelpers.js');

const React = require('react');

const cli = require('@boost/cli');

const setup = require('../setup.js');

function _interopDefault(e) {
  return e && e.__esModule ? e : {
    'default': e
  };
}

const React__default = /*#__PURE__*/_interopDefault(React);

var _dec, _dec2, _dec3, _class, _class2, _descriptor;

let Scaffold = (_dec = cli.Config('scaffold', setup.tool.msg('app:cliCommandScaffold'), {
  category: 'core'
}), _dec2 = cli.Arg.Flag(setup.tool.msg('app:cliOptionDryRun')), _dec3 = cli.Arg.Params({
  description: setup.tool.msg('app:cliArgGenerator'),
  label: 'generator',
  required: true,
  type: 'string'
}, {
  description: setup.tool.msg('app:cliArgGeneratorAction'),
  label: 'action',
  required: true,
  type: 'string'
}, {
  description: setup.tool.msg('app:cliArgGeneratorName'),
  label: 'name',
  type: 'string'
}), _dec(_class = (_class2 = class Scaffold extends cli.Command {
  constructor(...args) {
    super(...args);

    _rollupPluginBabelHelpers.initializerDefineProperty(this, "dry", _descriptor, this);
  }

  async run(generator, action, name = '') {
    const _await$Promise$resolv = await Promise.resolve().then(function () {
      return require('../components/App.js');
    }),
          App = _await$Promise$resolv.App;

    const pipeline = setup.tool.createScaffoldPipeline(this.getArguments(), generator, action, name);
    return /*#__PURE__*/React__default["default"].createElement(App, {
      pipeline: pipeline
    });
  }

}, (_descriptor = _rollupPluginBabelHelpers.applyDecoratedDescriptor(_class2.prototype, "dry", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return false;
  }
}), _rollupPluginBabelHelpers.applyDecoratedDescriptor(_class2.prototype, "run", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "run"), _class2.prototype)), _class2)) || _class);
exports.Scaffold = Scaffold;
//# sourceMappingURL=Scaffold.js.map
