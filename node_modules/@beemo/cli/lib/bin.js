#!/usr/bin/env node
'use strict';

const CreateConfig = require('./commands/CreateConfig.js');

const RunDriver = require('./commands/RunDriver.js');

const RunScript = require('./commands/RunScript.js');

const Scaffold = require('./commands/Scaffold.js');

const createDriverCommand = require('./createDriverCommand.js');

const setup = require('./setup.js');
/* eslint-disable @typescript-eslint/no-unsafe-assignment */


async function run() {
  // Add normal commands
  setup.program.register(new CreateConfig.CreateConfig()).register(new RunDriver.RunDriver()).register(new RunScript.RunScript()).register(new Scaffold.Scaffold()); // Add categories

  setup.program.categories({
    core: 'Core',
    driver: 'Drivers',
    script: 'Scripts'
  }); // @ts-expect-error Inherit hidden buffer

  setup.tool.errStream = setup.program.errBuffer; // @ts-expect-error Inherit hidden buffer

  setup.tool.outStream = setup.program.outBuffer; // Run the program!

  await setup.program.runAndExit(setup.argv, async () => {
    // Load config and plugins
    await setup.tool.bootstrap(); // Bootstrap config module

    await setup.tool.bootstrapConfigModule(); // Add a command for each driver

    setup.tool.driverRegistry.getAll().forEach(driver => {
      setup.program.register(createDriverCommand.createDriverCommand(driver, setup.parallelArgv));
    });
  });
}

void run();
//# sourceMappingURL=bin.js.map
