'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

Object.defineProperty(exports, '__esModule', {
  value: true
});

const cli = require('@boost/cli');

const BaseRunCommand = require('./commands/BaseRunCommand.js');

const setup = require('./setup.js');

function createDriverCommand(driver, parallelArgv) {
  var _dec, _class;

  const path = driver.getName();
  let RunExplicitDriver = (_dec = cli.Config(path, driver.metadata.description || setup.tool.msg('app:run', {
    title: driver.metadata.title
  }), {
    allowUnknownOptions: true,
    allowVariadicParams: true,
    category: 'driver'
  }), _dec(_class = class RunExplicitDriver extends BaseRunCommand.BaseRunCommand {
    getParserOptions() {
      const parent = super.getParserOptions();
      return _objectSpread(_objectSpread({}, parent), {}, {
        loose: true,
        options: _objectSpread(_objectSpread({}, parent.options), driver.metadata.commandOptions)
      });
    }

    async run() {
      const pipeline = setup.tool.createRunDriverPipeline(this.getArguments(), path, parallelArgv);
      return this.renderDriver(pipeline);
    }

  }) || _class);
  const command = new RunExplicitDriver(); // Register sub-commands for the driver

  driver.commands.forEach(({
    path: subpath,
    config,
    runner
  }) => {
    command.register(`${path}:${subpath}`, _objectSpread(_objectSpread({}, config), {}, {
      category: 'driver'
    }), (options, params, rest) => runner(setup.tool, options, params, rest));
  });
  return command;
}

exports.createDriverCommand = createDriverCommand;
//# sourceMappingURL=createDriverCommand.js.map
