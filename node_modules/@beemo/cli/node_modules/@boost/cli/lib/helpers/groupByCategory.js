'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

Object.defineProperty(exports, '__esModule', {
  value: true
});

function groupByCategory(items, categories) {
  const weightedCategories = Object.entries(categories).map(([key, category]) => _objectSpread({
    key,
    weight: 50
  }, typeof category === 'string' ? {
    name: category
  } : category)); // Sort by weight, then name

  weightedCategories.sort((a, b) => {
    const diff = a.weight - b.weight;
    return diff === 0 ? a.name.localeCompare(b.name) : diff;
  }); // Uncategorized always go first

  weightedCategories.unshift({
    key: 'uncategorized',
    name: '',
    weight: 0
  }); // Create a mapping

  const map = {};
  weightedCategories.forEach(category => {
    map[category.key] = {
      items: [],
      name: category.name
    };
  }); // Map items to their category

  items.forEach(item => {
    if (!item.hidden) {
      if (item.category && map[item.category]) {
        map[item.category].items.push(item);
      } else {
        map.uncategorized.items.push(item);
      }
    }
  }); // Sort by name

  Object.entries(map).forEach(([key, record]) => {
    if (record.items.length === 0) {
      delete map[key];
    } else {
      record.items.sort((a, b) => a.name.localeCompare(b.name));
    }
  });
  return map;
}

exports.groupByCategory = groupByCategory;
//# sourceMappingURL=groupByCategory.js.map
