'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

Object.defineProperty(exports, '__esModule', {
  value: true
});

var common = require('@boost/common');

var internal = require('@boost/internal');

var terminal = require('@boost/terminal');

var CLIError = require('../CLIError.js');

const loadedThemes = new Map();

function loadTheme() {
  var _internal$env;

  const theme = (_internal$env = internal.env('CLI_THEME')) !== null && _internal$env !== void 0 ? _internal$env : '';
  let palette = loadedThemes.get(theme);

  if (terminal.style.level > 0 && !palette && !!theme) {
    try {
      palette = common.requireModule(`@boost/theme-${theme}`);
    } catch {
      try {
        palette = common.requireModule(`boost-theme-${theme}`);
      } catch {
        throw new CLIError.CLIError('THEME_UNKNOWN', [theme]);
      }
    }

    if (palette) {
      loadedThemes.set(theme, palette);
    }
  } // ANSI escapes + hexcodes dont work too well with snapshots


  const isTest = process.env.NODE_ENV === 'test';
  return _objectSpread({
    default: 'white',
    failure: 'red',
    info: 'cyan',
    // Use a hexcode since it sometimes renders as gray
    inverted: isTest ? 'black' : '#000',
    muted: 'gray',
    notice: 'magenta',
    success: 'green',
    warning: 'yellow'
  }, palette);
}

exports.loadTheme = loadTheme;
//# sourceMappingURL=loadTheme.js.map
