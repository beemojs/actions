'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

Object.defineProperty(exports, '__esModule', {
  value: true
});

var React = require('react');

function useListNavigation(list, defaultIndex) {
  const getNextIndex = React.useCallback((index, step) => {
    var _list$nextIndex, _list$nextIndex2;

    let nextIndex = index;

    if (nextIndex >= list.length) {
      nextIndex = 0;
    } else if (nextIndex < 0) {
      nextIndex = list.length - 1;
    }

    if ((_list$nextIndex = list[nextIndex]) !== null && _list$nextIndex !== void 0 && _list$nextIndex.disabled || (_list$nextIndex2 = list[nextIndex]) !== null && _list$nextIndex2 !== void 0 && _list$nextIndex2.divider) {
      nextIndex = getNextIndex(nextIndex + step, step);
    }

    return nextIndex;
  }, [list]);

  const _React$useState = React.useState(() => defaultIndex !== null && defaultIndex !== void 0 ? defaultIndex : getNextIndex(0, 1)),
        _React$useState2 = _slicedToArray(_React$useState, 2),
        highlightedIndex = _React$useState2[0],
        setHighlightedIndex = _React$useState2[1];

  const onKeyDown = React.useCallback(() => {
    setHighlightedIndex(index => getNextIndex(index + 1, 1));
  }, [getNextIndex]);
  const onKeyUp = React.useCallback(() => {
    setHighlightedIndex(index => getNextIndex(index - 1, -1));
  }, [getNextIndex]);
  const onKeyLeft = React.useCallback(() => {
    setHighlightedIndex(getNextIndex(0, 1));
  }, [getNextIndex]);
  const onKeyRight = React.useCallback(() => {
    setHighlightedIndex(getNextIndex(list.length - 1, -1));
  }, [getNextIndex, list]);
  return {
    highlightedIndex,
    onKeyDown,
    onKeyLeft,
    onKeyRight,
    onKeyUp
  };
}

exports.useListNavigation = useListNavigation;
//# sourceMappingURL=useListNavigation.js.map
