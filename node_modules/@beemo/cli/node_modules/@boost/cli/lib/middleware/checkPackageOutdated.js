'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var https = require('https');

var semver = require('semver');

var common = require('@boost/common');

function _interopDefault(e) {
  return e && e.__esModule ? e : {
    'default': e
  };
}

var https__default = /*#__PURE__*/_interopDefault(https);

var semver__default = /*#__PURE__*/_interopDefault(semver);

async function fetchPackageLatestVersion(name) {
  return new Promise(resolve => {
    https__default['default'].get(`https://registry.npmjs.org/${name}`, resp => {
      let data = '';
      resp.on('data', chunk => {
        data += String(chunk);
      });
      resp.on('end', () => {
        var _pkg$distTags;

        const pkg = common.json.parse(data);
        resolve((_pkg$distTags = pkg['dist-tags']) === null || _pkg$distTags === void 0 ? void 0 : _pkg$distTags.latest);
      });
      resp.on('error', () => {
        // Instead of failing the process, return a fake response
        resolve(undefined);
      });
    });
  });
}
/**
 * Verify that a package and its provided version is using the latest distribution
 * version by checking against the npm registry. If not, a console message will be logged.
 */


function checkPackageOutdated(name, version) {
  return async (argv, parse, logger) => {
    const latestVersion = await fetchPackageLatestVersion(name);

    if (latestVersion && !semver__default['default'].satisfies(version, `>=${latestVersion}`)) {
      logger.info(`Your version of ${name} is out of date.`, `Latest version is ${latestVersion}, while you're using ${version}.`);
    }

    return parse(argv);
  };
}

exports.checkPackageOutdated = checkPackageOutdated;
//# sourceMappingURL=checkPackageOutdated.js.map
