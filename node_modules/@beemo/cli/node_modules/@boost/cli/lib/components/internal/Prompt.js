'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

Object.defineProperty(exports, '__esModule', {
  value: true
});

var React = require('react');

var ink = require('ink');

var terminal = require('@boost/terminal');

var useIsMounted = require('../../hooks/useIsMounted.js');

var Style = require('../Style.js');

var Label = require('./Label.js');

function _interopDefault(e) {
  return e && e.__esModule ? e : {
    'default': e
  };
}

var React__default = /*#__PURE__*/_interopDefault(React);

function Prompt({
  afterLabel,
  beforeLabel,
  children,
  focused,
  label,
  onBackspace,
  onDelete,
  onEscape,
  onInput,
  onKeyDown,
  onKeyLeft,
  onKeyRight,
  onKeyUp,
  onPageDown,
  onPageUp,
  onReturn,
  onSpace,
  onTab,
  prefix = '?',
  validate,
  value
}) {
  const _ink$useFocusManager = ink.useFocusManager(),
        focusNext = _ink$useFocusManager.focusNext;

  const _React$useState = React.useState(null),
        _React$useState2 = _slicedToArray(_React$useState, 2),
        error = _React$useState2[0],
        setError = _React$useState2[1];

  const _React$useState3 = React.useState(false),
        _React$useState4 = _slicedToArray(_React$useState3, 2),
        submitted = _React$useState4[0],
        setSubmitted = _React$useState4[1];

  const mounted = useIsMounted.useIsMounted();
  const attemptSubmit = React.useCallback(commit => {
    let doSubmit = false;

    try {
      setError(null);
      doSubmit = !!commit();
    } catch (error_) {
      doSubmit = false;

      if (error_ instanceof Error) {
        setError(error_);
      }
    }

    if (!mounted.current) {
      return;
    }

    setSubmitted(doSubmit);

    if (doSubmit) {
      focusNext();
    }
  }, [focusNext, mounted]);
  ink.useInput( // eslint-disable-next-line complexity
  (input, key) => {
    if (!mounted.current) {
      return;
    }

    if (key.upArrow) {
      onKeyUp === null || onKeyUp === void 0 ? void 0 : onKeyUp(key);
    } else if (key.downArrow) {
      onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(key);
    } else if (key.leftArrow) {
      onKeyLeft === null || onKeyLeft === void 0 ? void 0 : onKeyLeft(key);
    } else if (key.rightArrow) {
      onKeyRight === null || onKeyRight === void 0 ? void 0 : onKeyRight(key);
    } else if (key.pageUp) {
      onPageUp === null || onPageUp === void 0 ? void 0 : onPageUp(key);
    } else if (key.pageDown) {
      onPageDown === null || onPageDown === void 0 ? void 0 : onPageDown(key);
    } else if (key.return) {
      // Only run if we want validation or to submit,
      // otherwise we trigger an unwanted submitted state
      if (onReturn || validate) {
        attemptSubmit(() => {
          if (value !== null) {
            validate === null || validate === void 0 ? void 0 : validate(value);
          }

          return onReturn === null || onReturn === void 0 ? void 0 : onReturn();
        });
      }
    } else if (key.tab) {
      onTab === null || onTab === void 0 ? void 0 : onTab(key);
    } else if (key.backspace) {
      onBackspace === null || onBackspace === void 0 ? void 0 : onBackspace(key);
      setSubmitted(false);
    } else if (key.delete) {
      onDelete === null || onDelete === void 0 ? void 0 : onDelete(key);
      setSubmitted(false);
    } else if (key.escape) {
      onEscape === null || onEscape === void 0 ? void 0 : onEscape(key);
    } else if (input === ' ' && onSpace) {
      onSpace(key);
      setSubmitted(false);
    } else {
      attemptSubmit(() => onInput === null || onInput === void 0 ? void 0 : onInput(input, key));
    }
  }, {
    isActive: focused
  });
  return /*#__PURE__*/React__default['default'].createElement(ink.Box, {
    flexDirection: "column"
  }, /*#__PURE__*/React__default['default'].createElement(ink.Box, {
    flexDirection: "row"
  }, /*#__PURE__*/React__default['default'].createElement(ink.Box, null, submitted && !error && /*#__PURE__*/React__default['default'].createElement(Style.Style, {
    type: "success"
  }, terminal.figures.tick), !submitted && error && /*#__PURE__*/React__default['default'].createElement(Style.Style, {
    type: "failure"
  }, terminal.figures.cross), !submitted && !error && /*#__PURE__*/React__default['default'].createElement(Style.Style, {
    type: "info"
  }, prefix)), beforeLabel, /*#__PURE__*/React__default['default'].createElement(ink.Box, {
    marginLeft: 1,
    marginRight: 1
  }, /*#__PURE__*/React__default['default'].createElement(Label.Label, null, label)), afterLabel), error && /*#__PURE__*/React__default['default'].createElement(ink.Box, {
    marginLeft: 2
  }, /*#__PURE__*/React__default['default'].createElement(Style.Style, {
    type: "failure"
  }, error.message)), children && focused && /*#__PURE__*/React__default['default'].createElement(ink.Box, {
    flexDirection: "column",
    marginLeft: 2
  }, children));
}

exports.Prompt = Prompt;
//# sourceMappingURL=Prompt.js.map
