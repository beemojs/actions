'use strict';

const _excluded = ["defaultSelected", "limit", "onChange", "onSubmit", "overflowAfterLabel", "overflowBeforeLabel", "options", "scrollType"],
      _excluded2 = ["highlightedIndex"];

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _rollupPluginBabelHelpers = require('../_virtual/_rollupPluginBabelHelpers.js');

var React = require('react');

var ink = require('ink');

var common = require('@boost/common');

var terminal = require('@boost/terminal');

require('../hooks/index.js');

var DividerRow = require('./internal/DividerRow.js');

var OptionRow = require('./internal/OptionRow.js');

var Prompt = require('./internal/Prompt.js');

var ScrollableList = require('./internal/ScrollableList.js');

var Selected = require('./internal/Selected.js');

var Select = require('./Select.js');

var useListNavigation = require('../hooks/useListNavigation.js');

function _interopDefault(e) {
  return e && e.__esModule ? e : {
    'default': e
  };
}

var React__default = /*#__PURE__*/_interopDefault(React);
/**
 * A React component that renders a select menu with options, where multiple options can be seleted.
 * Options can be navigated with arrow keys, selected with "space", and submitted with "enter".
 */


function MultiSelect(props) {
  const defaultSelected = props.defaultSelected,
        limit = props.limit,
        onChange = props.onChange,
        onSubmit = props.onSubmit,
        overflowAfterLabel = props.overflowAfterLabel,
        overflowBeforeLabel = props.overflowBeforeLabel,
        baseOptions = props.options,
        scrollType = props.scrollType,
        restProps = _objectWithoutProperties(props, _excluded);

  const options = React.useMemo(() => Select.normalizeOptions(baseOptions), [baseOptions]);

  const _React$useState = React.useState(new Set(common.toArray(defaultSelected))),
        _React$useState2 = _slicedToArray(_React$useState, 2),
        selectedValues = _React$useState2[0],
        setSelectedValues = _React$useState2[1];

  const _useListNavigation$us = useListNavigation.useListNavigation(options),
        highlightedIndex = _useListNavigation$us.highlightedIndex,
        arrowKeyProps = _objectWithoutProperties(_useListNavigation$us, _excluded2);

  const _ink$useFocus = ink.useFocus({
    autoFocus: true
  }),
        isFocused = _ink$useFocus.isFocused;

  const handleSpace = React.useCallback(() => {
    const value = options[highlightedIndex].value; // istanbul ignore next

    if (value === null) {
      return;
    }

    if (selectedValues.has(value)) {
      selectedValues.delete(value);
    } else {
      selectedValues.add(value);
    }

    setSelectedValues(new Set(selectedValues));
    onChange === null || onChange === void 0 ? void 0 : onChange([...selectedValues]);
  }, [highlightedIndex, onChange, options, selectedValues]);
  const handleReturn = React.useCallback(() => {
    // eslint-disable-next-line @typescript-eslint/no-confusing-void-expression
    onSubmit === null || onSubmit === void 0 ? void 0 : onSubmit([...selectedValues]); // Trigger submit

    return true;
  }, [onSubmit, selectedValues]);
  const renderItem = React.useCallback(option => {
    if (option.divider) {
      return /*#__PURE__*/React__default['default'].createElement(DividerRow.DividerRow, {
        key: option.index,
        label: option.label
      });
    }

    return /*#__PURE__*/React__default['default'].createElement(OptionRow.OptionRow, {
      key: option.index,
      highlighted: highlightedIndex === option.index,
      icon: terminal.figures.circleDotted,
      iconActive: terminal.figures.bullet,
      label: option.label,
      selected: selectedValues.has(option.value)
    });
  }, [highlightedIndex, selectedValues]);
  const selectedList = React.useMemo(() => [...selectedValues], [selectedValues]);
  return /*#__PURE__*/React__default['default'].createElement(Prompt.Prompt, _rollupPluginBabelHelpers['extends']({}, restProps, arrowKeyProps, {
    afterLabel: selectedList.length > 0 && /*#__PURE__*/React__default['default'].createElement(Selected.Selected, {
      value: selectedList
    }),
    focused: isFocused,
    value: selectedList,
    onReturn: handleReturn,
    onSpace: handleSpace
  }), /*#__PURE__*/React__default['default'].createElement(ScrollableList.ScrollableList, {
    currentIndex: highlightedIndex,
    items: options,
    limit: limit,
    overflowAfterLabel: overflowAfterLabel,
    overflowBeforeLabel: overflowBeforeLabel,
    renderItem: renderItem,
    scrollType: scrollType
  }));
}

exports.MultiSelect = MultiSelect;
//# sourceMappingURL=MultiSelect.js.map
