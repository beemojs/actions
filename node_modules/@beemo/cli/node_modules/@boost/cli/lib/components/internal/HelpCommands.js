'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

Object.defineProperty(exports, '__esModule', {
  value: true
});

var React = require('react');

var ink = require('ink');

var terminal = require('@boost/terminal');

var constants = require('../../constants.js');

require('../../helpers/index.js');

var translate = require('../../translate.js');

var Header = require('../Header.js');

var Style = require('../Style.js');

var formatCommandCall = require('../../helpers/formatCommandCall.js');

var groupByCategory = require('../../helpers/groupByCategory.js');

var formatDescription = require('../../helpers/formatDescription.js');

function _interopDefault(e) {
  return e && e.__esModule ? e : {
    'default': e
  };
}

var React__default = /*#__PURE__*/_interopDefault(React);

function HelpCommands({
  categories,
  commands
}) {
  const pathWidth = React.useRef(0);
  const items = React.useMemo(() => Object.entries(commands).map(([path, command]) => {
    const pathCall = formatCommandCall.formatCommandCall(path, command);
    const pathCallStripped = terminal.stripAnsi(pathCall);

    if (pathCallStripped.length > pathWidth.current) {
      pathWidth.current = pathCallStripped.length;
    }

    return _objectSpread(_objectSpread({}, command), {}, {
      name: path,
      path,
      pathCall
    });
  }), [commands]);
  const categorizedCommands = React.useMemo(() => groupByCategory.groupByCategory(items, categories !== null && categories !== void 0 ? categories : {}), [categories, items]);
  const categoryCount = Object.keys(categorizedCommands).length;
  return /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, /*#__PURE__*/React__default['default'].createElement(Header.Header, {
    label: translate.msg('cli:labelCommands')
  }), Object.entries(categorizedCommands).map(([key, category], index) => /*#__PURE__*/React__default['default'].createElement(ink.Box, {
    key: key,
    flexDirection: "column"
  }, !!category.name && categoryCount > 1 && /*#__PURE__*/React__default['default'].createElement(ink.Box, {
    marginTop: index === 0 ? 0 : constants.SPACING_ROW,
    paddingLeft: constants.SPACING_COL
  }, /*#__PURE__*/React__default['default'].createElement(Style.Style, {
    bold: true,
    type: "none"
  }, category.name)), category.items.map(config => {
    const desc = formatDescription.formatDescription(config);
    return /*#__PURE__*/React__default['default'].createElement(ink.Box, {
      key: key + config.path,
      flexDirection: "row",
      paddingLeft: constants.SPACING_COL
    }, /*#__PURE__*/React__default['default'].createElement(ink.Box, {
      flexGrow: 0,
      width: pathWidth.current + constants.SPACING_COL_WIDE
    }, /*#__PURE__*/React__default['default'].createElement(ink.Text, null, config.pathCall)), /*#__PURE__*/React__default['default'].createElement(ink.Box, {
      flexGrow: 1
    }, /*#__PURE__*/React__default['default'].createElement(ink.Text, {
      wrap: "wrap"
    }, desc)));
  }))));
}

exports.HelpCommands = HelpCommands;
//# sourceMappingURL=HelpCommands.js.map
