'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

Object.defineProperty(exports, '__esModule', {
  value: true
});

var args = require('@boost/args');

var common = require('@boost/common');
/* eslint-disable @typescript-eslint/no-explicit-any */


const _common$predicates = common.predicates,
      array = _common$predicates.array,
      bool = _common$predicates.bool,
      func = _common$predicates.func,
      number = _common$predicates.number,
      object = _common$predicates.object,
      shape = _common$predicates.shape,
      string = _common$predicates.string,
      union = _common$predicates.union;
const commonBlueprint = {
  deprecated: bool(),
  description: string().notEmpty().required(),
  hidden: bool()
}; // COMMANDS

const commandConstructorBlueprint = _objectSpread(_objectSpread({}, commonBlueprint), {}, {
  aliases: array(string()),
  allowUnknownOptions: bool(),
  allowVariadicParams: union([bool(), string()], false),
  categories: object(union([string().notEmpty(), shape({
    name: string().notEmpty(),
    weight: number()
  })], '')),
  category: string(),
  hasRegisteredOptions: string(),
  path: string().notEmpty().required().match(args.COMMAND_FORMAT),
  usage: union([string(), array(string())], [])
}); // ARGS


const argBlueprint = _objectSpread(_objectSpread({}, commonBlueprint), {}, {
  default: union([bool(), number(), string()], ''),
  format: func(),
  type: string('string').required(),
  validate: func()
}); // OPTIONS


const optionBlueprint = _objectSpread(_objectSpread({}, argBlueprint), {}, {
  category: string(),
  short: string().match(/^[a-z]$/giu)
});

const flagBlueprint = _objectSpread(_objectSpread({}, optionBlueprint), {}, {
  default: bool(args.DEFAULT_BOOLEAN_VALUE),
  type: string().oneOf(['boolean'])
});

const stringOptionBlueprint = _objectSpread(_objectSpread({}, optionBlueprint), {}, {
  choices: array(string()),
  count: bool().never(),
  default: string(args.DEFAULT_STRING_VALUE),
  type: string().oneOf(['string'])
});

const stringsOptionBlueprint = _objectSpread(_objectSpread({}, optionBlueprint), {}, {
  arity: number(),
  default: array(string(), []),
  multiple: bool().onlyTrue(),
  type: string().oneOf(['string'])
});

const numberOptionBlueprint = _objectSpread(_objectSpread({}, optionBlueprint), {}, {
  choices: array(number()),
  count: bool().onlyTrue(),
  default: number(args.DEFAULT_NUMBER_VALUE),
  type: string().oneOf(['number'])
});

const numbersOptionBlueprint = _objectSpread(_objectSpread({}, optionBlueprint), {}, {
  arity: number(),
  default: array(number(), []),
  multiple: bool().onlyTrue(),
  type: string().oneOf(['number'])
}); // PARAMS


const paramBlueprint = _objectSpread(_objectSpread({}, argBlueprint), {}, {
  label: string(),
  required: bool(),
  validate: func()
});

exports.argBlueprint = argBlueprint;
exports.commandConstructorBlueprint = commandConstructorBlueprint;
exports.commonBlueprint = commonBlueprint;
exports.flagBlueprint = flagBlueprint;
exports.numberOptionBlueprint = numberOptionBlueprint;
exports.numbersOptionBlueprint = numbersOptionBlueprint;
exports.optionBlueprint = optionBlueprint;
exports.paramBlueprint = paramBlueprint;
exports.stringOptionBlueprint = stringOptionBlueprint;
exports.stringsOptionBlueprint = stringsOptionBlueprint;
//# sourceMappingURL=blueprints.js.map
