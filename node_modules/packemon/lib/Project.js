'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

const _rollupPluginBabelHelpers = require('./_virtual/_rollupPluginBabelHelpers.js');

const execa = require('execa');

const semver = require('semver');

const common = require('@boost/common');

const getVersion = require('./helpers/getVersion.js');

const Package = require('./Package.js');

const _interopDefault = e => e && e.__esModule ? e : {
  default: e
};

const execa__default = /*#__PURE__*/_interopDefault(execa);

const semver__default = /*#__PURE__*/_interopDefault(semver);

var _dec, _dec2, _dec3, _class;

let Project = (_dec = common.Memoize(), _dec2 = common.Memoize(), _dec3 = common.Memoize(), (_class = class Project extends common.Project {
  constructor(...args) {
    super(...args);
    this.workspaces = [];
    this.buildPromise = void 0;
  }

  checkEngineVersionConstraint() {
    var _this$rootPackage$pac;

    let version = '';

    try {
      version = getVersion.getVersion();
    } catch {
      return;
    }

    const versionConstraint = (_this$rootPackage$pac = this.rootPackage.packageJson.engines) === null || _this$rootPackage$pac === void 0 ? void 0 : _this$rootPackage$pac.packemon;

    if (version && versionConstraint && !semver__default.default.satisfies(version, versionConstraint)) {
      throw new Error(`Project requires a packemon version compatible with ${versionConstraint}, found ${version}.`);
    }
  }

  isLernaManaged() {
    return this.isWorkspacesEnabled() && this.root.append('lerna.json').exists();
  }

  isWorkspacesEnabled() {
    return this.workspaces.length > 0;
  }

  async generateDeclarations(declarationConfig) {
    if (this.buildPromise) {
      return this.buildPromise;
    }

    const args = [];

    if (this.isWorkspacesEnabled()) {
      args.push('--build', // Since we collapse all DTS into a single file,
      // we need to force build to overwrite the types,
      // since they're not what the TS build expects.
      '--force');
    } else {
      args.push('--declaration', '--declarationDir', 'dts', '--declarationMap', '--emitDeclarationOnly'); // This options isnt supported with project references

      if (declarationConfig) {
        args.push('--project', declarationConfig);
      }
    } // Store the promise so parallel artifacts can rely on the same build


    this.buildPromise = execa__default.default('tsc', args, {
      cwd: this.root.path(),
      preferLocal: true
    });
    return this.buildPromise;
  }

  getWorkspacePackageNames() {
    return this.getWorkspacePackages().map(wp => wp.package.name);
  }

  get rootPackage() {
    const pkg = new Package.Package(this, this.root, this.getPackage());
    pkg.root = true;
    return pkg;
  }

}, (_rollupPluginBabelHelpers.applyDecoratedDescriptor(_class.prototype, "isLernaManaged", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "isLernaManaged"), _class.prototype), _rollupPluginBabelHelpers.applyDecoratedDescriptor(_class.prototype, "getWorkspacePackageNames", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, "getWorkspacePackageNames"), _class.prototype), _rollupPluginBabelHelpers.applyDecoratedDescriptor(_class.prototype, "rootPackage", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "rootPackage"), _class.prototype)), _class));
exports.Project = Project;
//# sourceMappingURL=Project.js.map
