'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

Object.defineProperty(exports, '__esModule', {
  value: true
});

const _rollupPluginBabelHelpers = require('../_virtual/_rollupPluginBabelHelpers.js');

const React = require('react');

const cli = require('@boost/cli');

const common = require('@boost/common');

const constants = require('../constants.js');

const Package = require('../Package.js');

const Base = require('./Base.js');

const _interopDefault = e => e && e.__esModule ? e : {
  default: e
};

const React__default = /*#__PURE__*/_interopDefault(React);

var _dec, _dec2, _class, _class2, _descriptor;

let InitCommand = (_dec = cli.Config('init', 'Initialize and configure Packemon for packages'), _dec2 = cli.Arg.Flag('Override already configured packages'), _dec(_class = (_class2 = class InitCommand extends Base.BaseCommand {
  constructor(...args) {
    super(...args);

    _rollupPluginBabelHelpers.initializerDefineProperty(this, "force", _descriptor, this);
  }

  async run() {
    const packages = await this.packemon.findPackagesInProject(this.getBuildOptions());
    const unconfiguredPackages = this.force ? packages : packages.filter(pkg => !pkg.package.packemon);

    if (unconfiguredPackages.length === 0) {
      if (packages.length === 0) {
        this.log.error('No packages found in project.');
      } else {
        this.log.info('All packages have been configured. Pass --force to override.');
      }

      return Promise.resolve();
    }

    const _await$Promise$resolv = await Promise.resolve().then(() => require('../components/Init/index.js')),
          Init = _await$Promise$resolv.Init;

    return /*#__PURE__*/React__default.default.createElement(Init, {
      packageNames: unconfiguredPackages.map(pkg => pkg.package.name),
      onComplete: configs => this.writeConfigsToPackageJsons(unconfiguredPackages, configs)
    });
  } // eslint-disable-next-line complexity


  formatConfigObject({
    format,
    inputs,
    namespace,
    platform,
    support
  }) {
    const config = {};

    if (format) {
      if (Array.isArray(format) && format.length === 1) {
        var _format = _slicedToArray(format, 1);

        config.format = _format[0];
      } else {
        config.format = format;
      }
    }

    if (inputs && !(Object.keys(inputs).length === 1 && inputs.index === constants.DEFAULT_INPUT)) {
      config.inputs = inputs;
    }

    if (namespace) {
      config.namespace = namespace;
    }

    if (platform) {
      if (Array.isArray(platform) && platform.length === 1) {
        var _platform = _slicedToArray(platform, 1);

        config.platform = _platform[0];
      } else {
        config.platform = platform;
      }
    }

    if (support && support !== constants.DEFAULT_SUPPORT) {
      config.support = support;
    }

    return config;
  }

  async writeConfigsToPackageJsons(packages, configs) {
    await Promise.all(packages.map(item => {
      const pkg = new Package.Package(this.packemon.project, new common.Path(item.metadata.packagePath), _objectSpread(_objectSpread({}, item.package), {}, {
        packemon: this.formatConfigObject(configs[item.package.name])
      }));
      return pkg.syncPackageJson();
    }));
  }

}, _descriptor = _rollupPluginBabelHelpers.applyDecoratedDescriptor(_class2.prototype, "force", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return false;
  }
}), _class2)) || _class);
exports.InitCommand = InitCommand;
//# sourceMappingURL=Init.js.map
