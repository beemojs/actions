'use strict';

var _process$env$PACKEMON, _process$env$PACKEMON2;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

Object.defineProperty(exports, '__esModule', {
  value: true
});

const fs = require('fs-extra');

const common = require('@boost/common');

require('./index.js');

const constants = require('./constants.js');

const Project = require('./Project.js');

const config = require('./babel/config.js');

const Package = require('./Package.js');

const CodeArtifact = require('./CodeArtifact.js');

const _interopDefault = e => e && e.__esModule ? e : {
  default: e
};

const fs__default = /*#__PURE__*/_interopDefault(fs);

const format = (_process$env$PACKEMON = process.env.PACKEMON_FORMAT) !== null && _process$env$PACKEMON !== void 0 ? _process$env$PACKEMON : 'lib';
const support = (_process$env$PACKEMON2 = process.env.PACKEMON_SUPPORT) !== null && _process$env$PACKEMON2 !== void 0 ? _process$env$PACKEMON2 : constants.DEFAULT_SUPPORT;
const project = new Project.Project(process.cwd());

function getBabelConfig(artifact, featureFlags) {
  const inputConfig = config.getBabelInputConfig(artifact, featureFlags);
  const outputConfig = config.getBabelOutputConfig(artifact.platform, artifact.support, artifact.builds[0].format, featureFlags);
  return {
    // Input must come first
    plugins: [...inputConfig.plugins, ...outputConfig.plugins],
    // Env must come first
    presets: [...outputConfig.presets, ...inputConfig.presets]
  };
}

function createConfig(folder, options = {}) {
  var _options$format, _options$platform, _options$support;

  const path = new common.Path(folder);
  const contents = fs__default.default.readJsonSync(path.append('package.json').path()); // Create package and configs

  const pkg = new Package.Package(project, path, contents);

  if (pkg.packageJson.packemon) {
    pkg.setConfigs(common.toArray(pkg.packageJson.packemon));
  } // Determine the lowest platform to support


  const platforms = pkg.configs.map(config => config.platform);
  let lowestPlatform = 'node'; // istanbul ignore next

  if (platforms.includes('browser')) {
    lowestPlatform = 'browser';
  } else if (platforms.includes('native')) {
    lowestPlatform = 'native';
  } // Generate artifact and builds


  const artifact = new CodeArtifact.CodeArtifact(pkg, [{
    format: (_options$format = options.format) !== null && _options$format !== void 0 ? _options$format : format
  }]);
  artifact.bundle = false;
  artifact.platform = (_options$platform = options.platform) !== null && _options$platform !== void 0 ? _options$platform : lowestPlatform;
  artifact.support = (_options$support = options.support) !== null && _options$support !== void 0 ? _options$support : support;
  return getBabelConfig(artifact, pkg.getFeatureFlags());
}

function createRootConfig(options) {
  const config = createConfig(process.cwd(), options);
  return _objectSpread(_objectSpread({}, config), {}, {
    babelrc: true,
    babelrcRoots: project.getWorkspaceGlobs({
      relative: true
    }),
    // Support React Native libraries by default
    overrides: [{
      presets: ['@babel/preset-flow'],
      test: /node_modules\/((jest-)?react-native|@react-native(-community)?)/iu
    }]
  });
}

exports.createConfig = createConfig;
exports.createRootConfig = createRootConfig;
//# sourceMappingURL=babel.js.map
