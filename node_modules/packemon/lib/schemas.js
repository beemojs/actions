'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

const common = require('@boost/common');

const constants = require('./constants.js');

const _common$predicates = common.predicates,
      array = _common$predicates.array,
      bool = _common$predicates.bool,
      number = _common$predicates.number,
      object = _common$predicates.object,
      string = _common$predicates.string,
      union = _common$predicates.union; // PLATFORMS

const platform = string(constants.DEFAULT_PLATFORM).oneOf(constants.PLATFORMS); // FORMATS

const nativeFormat = string('lib').oneOf(constants.FORMATS_NATIVE);
const nodeFormat = string('mjs').oneOf(constants.FORMATS_NODE);
const browserFormat = string('esm').oneOf(constants.FORMATS_BROWSER);
const format = string('lib').oneOf(constants.FORMATS).custom((value, schema) => {
  const platforms = new Set(common.toArray(schema.struct.platform));

  if (platforms.has('browser') && platforms.size === 1) {
    browserFormat.validate(value, schema.currentPath);
  } else if (platforms.has('native') && platforms.size === 1) {
    nativeFormat.validate(value, schema.currentPath);
  } else if (platforms.has('node') && platforms.size === 1) {
    nodeFormat.validate(value, schema.currentPath);
  }
}); // SUPPORT

const support = string(constants.DEFAULT_SUPPORT).oneOf(constants.SUPPORTS); // BLUEPRINTS

const packemonBlueprint = {
  bundle: bool(true),
  externals: union([string(), array(string())], []),
  format: union([array(format), format], []),
  inputs: object(string(), {
    index: constants.DEFAULT_INPUT
  }).custom(obj => {
    Object.keys(obj).forEach(key => {
      if (!key.match(/^\w+$/u)) {
        throw new Error(`Input "${key}" may only contain alpha-numeric characters.`);
      }
    });
  }),
  namespace: string(),
  platform: union([array(platform), platform], constants.DEFAULT_PLATFORM),
  support
};
const buildBlueprint = {
  addEngines: bool(),
  addExports: bool(),
  analyze: string('none').oneOf(['none', 'sunburst', 'treemap', 'network']),
  concurrency: number(1).gte(1),
  declaration: string('none').oneOf(['none', 'standard', 'api']),
  declarationConfig: string(),
  filter: string(),
  filterFormats: string(),
  filterPlatforms: string(),
  skipPrivate: bool(),
  timeout: number().gte(0)
};
const validateBlueprint = {
  deps: bool(true),
  engines: bool(true),
  entries: bool(true),
  files: bool(true),
  license: bool(true),
  links: bool(true),
  meta: bool(true),
  people: bool(true),
  skipPrivate: bool(false),
  repo: bool(true)
};
exports.buildBlueprint = buildBlueprint;
exports.packemonBlueprint = packemonBlueprint;
exports.validateBlueprint = validateBlueprint;
//# sourceMappingURL=schemas.js.map
