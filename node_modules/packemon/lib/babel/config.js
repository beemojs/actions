'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

Object.defineProperty(exports, '__esModule', {
  value: true
});

const constants = require('../constants.js');

const resolve = require('./resolve.js');

function getPlatformEnvOptions(platform, support, format) {
  let modules = false;

  if (format === 'umd') {
    modules = 'umd';
  } else if (format === 'cjs' || format === 'lib') {
    modules = 'cjs'; // Babel CommonJS
  }

  switch (platform) {
    case 'browser':
      return {
        modules,
        targets: {
          browsers: constants.BROWSER_TARGETS[support]
        }
      };

    case 'native':
      return {
        modules,
        targets: {
          browsers: constants.NATIVE_TARGETS[support]
        }
      };

    case 'node':
      return {
        // Async/await has been available since v7
        exclude: ['@babel/plugin-transform-regenerator', '@babel/plugin-transform-async-to-generator'],
        modules,
        targets: {
          node: constants.NODE_SUPPORTED_VERSIONS[support]
        }
      };

    default:
      throw new Error(`Unknown platform "${platform}".`);
  }
}

function getSharedConfig(plugins, presets, features) {
  return {
    caller: {
      name: 'packemon'
    },
    comments: true,
    parserOpts: {
      sourceType: 'unambiguous',
      strictMode: features.strict
    },
    plugins,
    presets,
    // Do NOT load root `babel.config.js` as we need full control
    configFile: false,
    // Do load branch `.babelrc.js` files for granular customization
    babelrc: true,
    babelrcRoots: features.workspaces
  };
} // The input config should only parse special syntax, not transform and downlevel.
// This applies to all formats within a build target.


function getBabelInputConfig(artifact, features) {
  const plugins = [];
  const presets = [];

  if (features.flow) {
    presets.push([resolve.resolve('@babel/preset-flow'), {
      allowDeclareFields: true
    }]);
  }

  if (features.typescript) {
    presets.push([resolve.resolve('@babel/preset-typescript'), {
      allowDeclareFields: true
    }]); // When decorators are used, class properties must be loose

    if (features.decorators) {
      plugins.push([resolve.resolve('@babel/plugin-proposal-decorators'), {
        legacy: true
      }], [resolve.resolveFromBabel('@babel/plugin-proposal-class-properties'), {
        loose: true
      }], [resolve.resolveFromBabel('@babel/plugin-proposal-private-methods'), {
        loose: true
      }], [resolve.resolveFromBabel('@babel/plugin-proposal-private-property-in-object'), {
        loose: true
      }]);
    }
  }

  if (features.react) {
    presets.push([resolve.resolve('@babel/preset-react'), {
      development: process.env.NODE_ENV !== "production",
      throwIfNamespace: true
    }]);
  }

  return getSharedConfig(plugins, presets, features);
} // The output config does all the transformation and downleveling through the preset-env.
// This is handled per output since we need to configure based on target + format combinations.


function getBabelOutputConfig(platform, support, format, features) {
  const plugins = [];
  const presets = [];
  const isESM = format === 'esm' || format === 'mjs'; // ENVIRONMENT

  const envOptions = _objectSpread({
    // Prefer spec compliance in development
    spec: process.env.NODE_ENV !== "production",
    loose: false,
    // Consumers must polyfill accordingly
    useBuiltIns: false,
    // Transform features accordingly
    bugfixes: true,
    shippedProposals: true
  }, getPlatformEnvOptions(platform, support, format));

  presets.push([resolve.resolve('@babel/preset-env'), envOptions]); // PLUGINS

  if (platform === 'browser' || platform === 'native') {
    // While modern browsers support these features, Node.js <= 12 does not,
    // which results in failing builds trying to parse the syntax.
    // Let's only apply this for the lib format, but allow it for esm.
    if (format === 'lib') {
      plugins.push(resolve.resolveFromBabel('@babel/plugin-proposal-logical-assignment-operators'), resolve.resolveFromBabel('@babel/plugin-proposal-nullish-coalescing-operator'), resolve.resolveFromBabel('@babel/plugin-proposal-optional-chaining'));
    } // Both browsers and Node.js support these features outside of legacy targets


    if (support === 'legacy') {
      plugins.push([resolve.resolve('babel-plugin-transform-async-to-promises'), {
        inlineHelpers: true,
        target: 'es5'
      }], [resolve.resolve('@babel/plugin-transform-runtime'), {
        helpers: false,
        regenerator: true,
        useESModules: isESM
      }]);
    }
  } else {
    // Use `Object.assign` when available
    plugins.push([resolve.resolveFromBabel('@babel/plugin-transform-destructuring'), {
      useBuiltIns: true
    }], [resolve.resolveFromBabel('@babel/plugin-proposal-object-rest-spread'), {
      useBuiltIns: true
    }]);
  } // Support our custom plugins


  if (platform === 'node') {
    plugins.push([resolve.resolve('babel-plugin-cjs-esm-interop'), {
      format: isESM ? 'mjs' : 'cjs'
    }]);
  }

  plugins.push(resolve.resolve('babel-plugin-conditional-invariant'), resolve.resolve('babel-plugin-env-constants'));
  return getSharedConfig(plugins, presets, features);
}

exports.getBabelInputConfig = getBabelInputConfig;
exports.getBabelOutputConfig = getBabelOutputConfig;
//# sourceMappingURL=config.js.map
