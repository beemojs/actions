'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

const module$1 = require('module');

const path = require('path');

const url = require('url');

const doResolve = require('resolve');

const _interopDefault = e => e && e.__esModule ? e : {
  default: e
};

const path__default = /*#__PURE__*/_interopDefault(path);

const doResolve__default = /*#__PURE__*/_interopDefault(doResolve); // This is in a separate file so that we can mock in tests
// and will not find globally installed dependencies unless we resolve.
// istanbul ignore next


function resolve(id) {
  let file = typeof document === 'undefined' ? new (require('u' + 'rl').URL)('file:' + __filename).href : document.currentScript && document.currentScript.src || new URL('babel/resolve.js', document.baseURI).href; // Because of our Babel plugin and Rollup, this may get transpiled differently
  // @ts-expect-error Allow this instance check

  if (file instanceof URL || typeof file === 'string' && file.startsWith('file:')) {
    file = url.fileURLToPath(file);
  }

  return doResolve__default.default.sync(id, {
    basedir: path__default.default.dirname(file)
  });
} // Furthermore, some plugins are dependents of Babel and not Packemon,
// so we need to resolve from that context for PnP to work correctly.


const babelRequire = module$1.createRequire(resolve('@babel/preset-env/package.json'));

function resolveFromBabel(id) {
  return babelRequire.resolve(id);
}

exports.resolve = resolve;
exports.resolveFromBabel = resolveFromBabel;
//# sourceMappingURL=resolve.js.map
