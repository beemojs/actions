'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

const fs = require('fs-extra');

const cli = require('@boost/cli');

const common = require('@boost/common');

const _interopDefault = e => e && e.__esModule ? e : {
  default: e
};

const fs__default = /*#__PURE__*/_interopDefault(fs);

class Artifact {
  constructor(pkg, builds) {
    this.builds = [];
    this.buildResult = {
      files: [],
      time: 0
    };
    this.package = void 0;
    this.state = 'pending';
    this.package = pkg;
    this.builds = builds;
  }

  cleanup() {}

  isComplete() {
    return this.state === 'passed' || this.state === 'failed';
  }

  isRunning() {
    return this.state === 'building';
  }

  startup() {}

  toString() {
    return this.getLabel();
  }

  logWithSource(message, level, {
    id,
    output,
    sourceColumn,
    sourceFile,
    sourceLine
  } = {}) {
    let msg = `[${this.package.getName()}${output ? `:${output}` : ''}] ${message}`;
    const meta = [];

    if (id) {
      meta.push(`id=${id}`);
    }

    if (sourceFile) {
      meta.push(`file=${new common.Path(sourceFile).path().replace(this.package.project.root.path(), '').slice(1)}`);
    }

    if (sourceLine || sourceColumn) {
      meta.push(`line=${sourceLine !== null && sourceLine !== void 0 ? sourceLine : '?'}:${sourceColumn !== null && sourceColumn !== void 0 ? sourceColumn : '?'}`);
    }

    if (meta.length > 0) {
      msg += cli.applyStyle(` (${meta.join(' ')})`, 'muted');
    }

    console[level](msg);
  }

  async removeFiles(files) {
    return Promise.all(files.map(file => fs__default.default.remove(String(file))));
  }

}

exports.Artifact = Artifact;
//# sourceMappingURL=Artifact.js.map
