'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

Object.defineProperty(exports, '__esModule', {
  value: true
});

const React = require('react');

const react = require('@boost/cli/react');

const common = require('@boost/common');

const constants = require('../constants.js');

const _interopDefault = e => e && e.__esModule ? e : {
  default: e
};

const React__default = /*#__PURE__*/_interopDefault(React);

function trimVersion(version) {
  const parts = version.split('.');

  while (parts[parts.length - 1] === '0') {
    parts.pop();
  }

  return parts.join('.');
}

function getVersionsCombo(platforms, support) {
  const versions = new Set();
  platforms.forEach(platform => {
    switch (platform) {
      case 'native':
        versions.add(`Native (${trimVersion(constants.NATIVE_TARGETS[support])})`);
        break;

      case 'node':
        versions.add(`Node v${trimVersion(constants.NODE_SUPPORTED_VERSIONS[support])}`);
        break;

      case 'browser':
        {
          const targets = support === 'experimental' ? ['last 2 versions'] : common.toArray(constants.BROWSER_TARGETS[support]);
          versions.add(`Browser (${targets[0]})`);
          break;
        }
      // no default
    }
  });
  return versions;
}

function Environment(props) {
  let platform;
  let support;

  if ('type' in props) {
    var _props$type$split = props.type.split(':');

    var _props$type$split2 = _slicedToArray(_props$type$split, 2);

    platform = _props$type$split2[0];
    support = _props$type$split2[1];
  } else {
    platform = props.platform;
    support = props.support;
  }

  return /*#__PURE__*/React__default.default.createElement(react.Style, {
    type: "muted"
  }, [...getVersionsCombo([platform], support)].join(', '));
}

exports.Environment = Environment;
exports.getVersionsCombo = getVersionsCombo;
//# sourceMappingURL=Environment.js.map
