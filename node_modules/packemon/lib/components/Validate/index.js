'use strict';

const _excluded = ["packemon", "onValidated"];

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

Object.defineProperty(exports, '__esModule', {
  value: true
});

const React = require('react');

const ink = require('ink');

const react = require('@boost/cli/react');

const useOnMount = require('../hooks/useOnMount.js');

const ValidateRow = require('./ValidateRow.js');

const _interopDefault = e => e && e.__esModule ? e : {
  default: e
};

const React__default = /*#__PURE__*/_interopDefault(React);

function Validate(_ref) {
  let packemon = _ref.packemon,
      onValidated = _ref.onValidated,
      options = _objectWithoutProperties(_ref, _excluded);

  const _react$useProgram = react.useProgram(),
        exit = _react$useProgram.exit;

  const clearLoop = react.useRenderLoop();

  const _React$useState = React.useState(true),
        _React$useState2 = _slicedToArray(_React$useState, 2),
        isValidating = _React$useState2[0],
        setIsValidating = _React$useState2[1];

  const _React$useState3 = React.useState([]),
        _React$useState4 = _slicedToArray(_React$useState3, 2),
        failedValidators = _React$useState4[0],
        setFailedValidators = _React$useState4[1]; // Run the validate process on mount


  useOnMount.useOnMount(() => {
    async function validate() {
      try {
        const validators = await packemon.validate(options);
        setIsValidating(false);
        setFailedValidators(validators.filter(validator => validator.hasErrors() || validator.hasWarnings()));
        onValidated === null || onValidated === void 0 ? void 0 : onValidated();
      } catch (error) {
        if (error instanceof Error) {
          exit(error);
        }
      } finally {
        clearLoop();
      }
    }

    void validate();
    return clearLoop;
  }); // Exit validation if there are any errors

  React.useEffect(() => {
    const errorCount = failedValidators.filter(validator => validator.hasErrors()).length;
    const errorMessage = errorCount === 1 ? `Found errors in ${failedValidators[0].package.getName()} package!` : `Found errors in ${errorCount} packages!`;

    if (errorCount > 0) {
      exit(`Validation failed. ${errorMessage}`);
    }
  }, [failedValidators, exit]);
  return /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement(ink.Static, {
    items: failedValidators
  }, validator => /*#__PURE__*/React__default.default.createElement(ValidateRow.ValidateRow, {
    key: `validate-${validator.package.getName()}`,
    validator: validator
  })), /*#__PURE__*/React__default.default.createElement(ink.Box, {
    flexDirection: "column",
    margin: 0
  }, isValidating && /*#__PURE__*/React__default.default.createElement(react.Header, {
    label: "Validating packages",
    marginBottom: 0
  })));
}

exports.Validate = Validate;
//# sourceMappingURL=index.js.map
