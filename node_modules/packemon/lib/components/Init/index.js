'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

Object.defineProperty(exports, '__esModule', {
  value: true
});

const React = require('react');

const ink = require('ink');

const react = require('@boost/cli/react');

const PackageForm = require('./PackageForm.js');

const _interopDefault = e => e && e.__esModule ? e : {
  default: e
};

const React__default = /*#__PURE__*/_interopDefault(React);

function Init({
  packageNames,
  onComplete
}) {
  const _react$useProgram = react.useProgram(),
        exit = _react$useProgram.exit;

  const _React$useState = React.useState(() => packageNames),
        _React$useState2 = _slicedToArray(_React$useState, 2),
        pkgsToConfigure = _React$useState2[0],
        setPkgsToConfigure = _React$useState2[1];

  const _React$useState3 = React.useState({}),
        _React$useState4 = _slicedToArray(_React$useState3, 2),
        pkgConfigs = _React$useState4[0],
        setPkgConfigs = _React$useState4[1];

  const currentPkg = React.useMemo(() => pkgsToConfigure[0], [pkgsToConfigure]); // Save config and move to next package

  const handleSubmit = React.useCallback(config => {
    setPkgConfigs(prev => _objectSpread(_objectSpread({}, prev), {}, {
      [currentPkg]: config
    }));
    setPkgsToConfigure(prev => prev.slice(1));
  }, [currentPkg]); // Complete once all packages have been configured

  React.useEffect(() => {
    async function complete() {
      if (pkgsToConfigure.length > 0) {
        return;
      }

      try {
        await onComplete(pkgConfigs);
      } catch (error) {
        exit(error);
      } finally {
        exit();
      }
    }

    void complete();
  }, [pkgsToConfigure, pkgConfigs, onComplete, exit]); // Exit when theres no packages

  if (pkgsToConfigure.length === 0) {
    return null;
  }

  return /*#__PURE__*/React__default.default.createElement(ink.Box, {
    flexDirection: "column"
  }, /*#__PURE__*/React__default.default.createElement(react.Header, {
    label: "Initializing packages"
  }), /*#__PURE__*/React__default.default.createElement(ink.Box, null, /*#__PURE__*/React__default.default.createElement(ink.Text, null, /*#__PURE__*/React__default.default.createElement(ink.Text, {
    bold: true
  }, "Packages to configure: "), /*#__PURE__*/React__default.default.createElement(react.Style, {
    type: "notice"
  }, currentPkg), pkgsToConfigure.length > 1 && `, ${pkgsToConfigure.slice(1).join(', ')}`)), /*#__PURE__*/React__default.default.createElement(ink.Box, {
    flexDirection: "column",
    marginTop: 1
  }, /*#__PURE__*/React__default.default.createElement(PackageForm.PackageForm, {
    key: currentPkg,
    onSubmit: handleSubmit
  })));
}

exports.Init = Init;
//# sourceMappingURL=index.js.map
