'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

Object.defineProperty(exports, '__esModule', {
  value: true
});

const React = require('react');

const cli = require('@boost/cli');

const react = require('@boost/cli/react');

const constants = require('../../constants.js');

const Environment = require('../Environment.js');

const _interopDefault = e => e && e.__esModule ? e : {
  default: e
};

const React__default = /*#__PURE__*/_interopDefault(React);

function getSupportVersions(platforms, support) {
  return cli.applyStyle([...Environment.getVersionsCombo(platforms, support)].sort().join(', '), 'muted');
}

function PackageForm({
  onSubmit
}) {
  const _React$useState = React.useState([]),
        _React$useState2 = _slicedToArray(_React$useState, 2),
        platform = _React$useState2[0],
        setPlatform = _React$useState2[1];

  const _React$useState3 = React.useState(constants.DEFAULT_SUPPORT),
        _React$useState4 = _slicedToArray(_React$useState3, 2),
        support = _React$useState4[0],
        setSupport = _React$useState4[1];

  const _React$useState5 = React.useState([]),
        _React$useState6 = _slicedToArray(_React$useState5, 2),
        format = _React$useState6[0],
        setFormat = _React$useState6[1];

  const _React$useState7 = React.useState(''),
        _React$useState8 = _slicedToArray(_React$useState7, 2),
        input = _React$useState8[0],
        setInput = _React$useState8[1];

  const _React$useState9 = React.useState(''),
        _React$useState10 = _slicedToArray(_React$useState9, 2),
        namespace = _React$useState10[0],
        setNamespace = _React$useState10[1]; // Submit once all values are acceptable


  React.useEffect(() => {
    const hasUMD = format.includes('umd');

    if (platform.length > 0 && format.length > 0 && support && input && (hasUMD && namespace || !hasUMD && !namespace)) {
      const result = {
        format,
        inputs: {
          index: input
        },
        namespace,
        platform,
        support
      }; // Delay submission or focus API crashes
      // https://github.com/vadimdemedes/ink/pull/404

      setTimeout(() => {
        onSubmit(result);
      }, 100); // Reset state for the next package

      setPlatform([]);
      setSupport(constants.DEFAULT_SUPPORT);
      setFormat([]);
      setInput('');
      setNamespace('');
    }
  }, [format, input, namespace, onSubmit, platform, support]); // PLATFORM

  const platformOptions = React.useMemo(() => [{
    label: 'Browsers',
    value: 'browser'
  }, {
    label: 'Node',
    value: 'node'
  }, {
    label: 'React Native',
    value: 'native'
  }], []);
  const validatePlatform = React.useCallback(value => {
    if (value.length === 0) {
      throw new Error('Please select at least 1 platform');
    }
  }, []); // SUPPORT

  const supportOptions = React.useMemo(() => [{
    label: `Legacy ${getSupportVersions(platform, 'legacy')}`,
    value: 'legacy'
  }, {
    label: `Stable ${getSupportVersions(platform, 'stable')}`,
    value: 'stable'
  }, {
    label: `Current ${getSupportVersions(platform, 'current')}`,
    value: 'current'
  }, {
    label: `Experimental ${getSupportVersions(platform, 'experimental')}`,
    value: 'experimental'
  }], [platform]);
  const validateSupport = React.useCallback(value => {
    if (!value) {
      throw new Error('Please select a supported environment');
    }
  }, []); // FORMAT

  const formatOptions = React.useMemo(() => {
    const options = [{
      label: 'Shared CommonJS',
      value: 'lib'
    }];

    if (platform.includes('node')) {
      options.push({
        label: `Node - CommonJS ${cli.applyStyle('(.cjs)', 'muted')}`,
        value: 'cjs'
      }, {
        label: `Node - ECMAScript ${cli.applyStyle('(.mjs)', 'muted')}`,
        value: 'mjs'
      });
    }

    if (platform.includes('browser')) {
      options.push({
        label: 'Browser - ECMAScript',
        value: 'esm'
      }, {
        label: 'Browser - UMD',
        value: 'umd'
      });
    }

    return options;
  }, [platform]);
  const validateFormat = React.useCallback(value => {
    if (value.length === 0) {
      throw new Error('Please select at least 1 format');
    }
  }, []); // INPUT

  const validateInput = React.useCallback(value => {
    if (!value || !value.match(/[-_a-z\d./\\]+/iu)) {
      throw new Error('Must be a valid file path');
    }
  }, []); // NAMESPACE

  const validateNamespace = React.useCallback(value => {
    if (!value || !value.match(/[a-z]\w+/iu)) {
      throw new Error('Must be in pascal-case or camel-case and start with an alpha character');
    }
  }, []);
  return /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement(react.MultiSelect, {
    label: "Platforms to target?",
    options: platformOptions,
    validate: validatePlatform,
    onSubmit: setPlatform
  }), /*#__PURE__*/React__default.default.createElement(react.Select, {
    defaultSelected: constants.DEFAULT_SUPPORT,
    label: "Environment to support?",
    options: supportOptions,
    validate: validateSupport,
    onSubmit: setSupport
  }), /*#__PURE__*/React__default.default.createElement(react.MultiSelect, {
    defaultSelected: constants.DEFAULT_FORMATS[platform[0]],
    label: "Formats to build?",
    options: formatOptions,
    validate: validateFormat,
    onSubmit: setFormat
  }), /*#__PURE__*/React__default.default.createElement(react.Input, {
    defaultValue: constants.DEFAULT_INPUT,
    label: "Main entry point?",
    validate: validateInput,
    onSubmit: setInput
  }), format.includes('umd') && /*#__PURE__*/React__default.default.createElement(react.Input, {
    label: "UMD namespace?",
    validate: validateNamespace,
    onSubmit: setNamespace
  }));
}

exports.PackageForm = PackageForm;
//# sourceMappingURL=PackageForm.js.map
