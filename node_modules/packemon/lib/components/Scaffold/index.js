'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

Object.defineProperty(exports, '__esModule', {
  value: true
});

const React = require('react');

const ink = require('ink');

const react = require('@boost/cli/react');

const common = require('@boost/common');

const TemplateSelect = require('./TemplateSelect.js');

const _interopDefault = e => e && e.__esModule ? e : {
  default: e
};

const React__default = /*#__PURE__*/_interopDefault(React);

function Scaffold({
  defaultTemplate,
  onComplete
}) {
  const _react$useProgram = react.useProgram(),
        exit = _react$useProgram.exit;

  const _React$useState = React.useState(),
        _React$useState2 = _slicedToArray(_React$useState, 2),
        template = _React$useState2[0],
        setTemplate = _React$useState2[1];

  const _React$useState3 = React.useState(''),
        _React$useState4 = _slicedToArray(_React$useState3, 2),
        packageName = _React$useState4[0],
        setPackageName = _React$useState4[1];

  const _React$useState5 = React.useState(''),
        _React$useState6 = _slicedToArray(_React$useState5, 2),
        projectName = _React$useState6[0],
        setProjectName = _React$useState6[1];

  const _React$useState7 = React.useState(''),
        _React$useState8 = _slicedToArray(_React$useState7, 2),
        repoUrl = _React$useState8[0],
        setRepoUrl = _React$useState8[1];

  const _React$useState9 = React.useState(''),
        _React$useState10 = _slicedToArray(_React$useState9, 2),
        author = _React$useState10[0],
        setAuthor = _React$useState10[1];

  React.useEffect(() => {
    // eslint-disable-next-line complexity
    async function complete() {
      if (!template) {
        return;
      } // Project validation


      if ((template === 'monorepo' || template === 'polyrepo') && (!projectName || !author)) {
        return;
      } // Package validation


      if ((template === 'monorepo-package' || template === 'polyrepo-package') && (!packageName || !author || !repoUrl)) {
        return;
      }

      try {
        await onComplete({
          author,
          template,
          repoUrl,
          packageName: packageName || projectName,
          projectName: projectName || `${packageName}-root`,
          year: new Date().getFullYear()
        });
      } catch (error) {
        exit(error);
      } finally {
        exit();
      }
    }

    void complete();
  }, [author, template, packageName, projectName, repoUrl, onComplete, exit]);
  const validatePackageName = React.useCallback(value => {
    if (!value || !value.trim() || !common.isModuleName(value)) {
      throw new Error('Please provide a valid npm package name');
    }
  }, []);
  const validateProjectName = React.useCallback(value => {
    if (!value || !value.trim() || !common.isModuleName(value)) {
      throw new Error('Please provide a valid project name (alphanumeric characters and dashes)');
    }
  }, []);
  const validateRepoUrl = React.useCallback(value => {
    if (!value || !value.trim() || !value.startsWith('http') && !value.startsWith('git@')) {
      throw new Error('Please provide a valid repository URL (https or git)');
    }
  }, []);
  const validateAuthor = React.useCallback(value => {
    if (!value || !value.trim()) {
      throw new Error('Please provide an author or company name');
    }
  }, []);
  const isPackage = template === 'monorepo-package' || template === 'polyrepo-package';
  return /*#__PURE__*/React__default.default.createElement(ink.Box, {
    flexDirection: "column"
  }, /*#__PURE__*/React__default.default.createElement(TemplateSelect.TemplateSelect, {
    defaultTemplate: defaultTemplate,
    onSelect: setTemplate
  }), /*#__PURE__*/React__default.default.createElement(react.Input, {
    label: "Author?",
    placeholder: "Your name, company name, ...",
    validate: validateAuthor,
    onSubmit: setAuthor
  }), isPackage ? /*#__PURE__*/React__default.default.createElement(react.Input, {
    label: "Package name?",
    validate: validatePackageName,
    onSubmit: setPackageName
  }) : /*#__PURE__*/React__default.default.createElement(react.Input, {
    label: "Project name?",
    validate: validateProjectName,
    onSubmit: setProjectName
  }), isPackage && /*#__PURE__*/React__default.default.createElement(react.Input, {
    label: "Repository URL?",
    validate: validateRepoUrl,
    onSubmit: setRepoUrl
  }));
}

exports.Scaffold = Scaffold;
//# sourceMappingURL=index.js.map
