import { Path } from '@boost/common';
import { Debugger } from '@boost/debug';
import { Artifact } from './Artifact';
import { BuildOptions, DeclarationType, PackageExports, TSConfigStructure, TypesBuild } from './types';
export declare class TypesArtifact extends Artifact<TypesBuild> {
    declarationType: DeclarationType;
    protected debug: Debugger;
    startup(): void;
    cleanup(): Promise<void>;
    build(options: BuildOptions): Promise<void>;
    findEntryPoint(outputName: string): string;
    getLabel(): string;
    getBuildTargets(): string[];
    getPackageExports(): PackageExports;
    toString(): string;
    protected generateApiDeclaration(outputName: string, inputFile: string, dtsBuildPath: Path): Promise<unknown>;
    protected getApiExtractorConfigPath(outputName: string): Path;
    protected loadTsconfigJson(): TSConfigStructure | undefined;
    /**
     * This method is unfortunate but necessary if TypeScript is using project references.
     * When using references, TS uses the `types` (or `typings`) field to determine types
     * across packages. But since we set that field to "dts/index.d.ts" for distributing
     * only the types necessary, it breaks the `tsc --build` unless the `outDir` is "dts".
     *
     * But when this happens, we have all the generated `*.d.ts` and `*.js` files in the "dts"
     * folder, which we do not want to distribute. So we need to manually delete all of them
     * except for the output files we created above.
     *
     * Not sure of a workaround or better solution :(
     */
    protected removeDeclarationBuild(dtsBuildPath: Path): Promise<void>;
}
//# sourceMappingURL=TypesArtifact.d.ts.map