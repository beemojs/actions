import { PortablePath } from '@boost/common';
import type { Package } from './Package';
import type { ArtifactState, Awaitable, BuildOptions, BuildResult, PackageExports } from './types';
export declare abstract class Artifact<T extends object = {}> {
    readonly builds: T[];
    readonly buildResult: BuildResult;
    readonly package: Package;
    state: ArtifactState;
    constructor(pkg: Package, builds: T[]);
    cleanup(): Awaitable;
    isComplete(): boolean;
    isRunning(): boolean;
    startup(): void;
    toString(): string;
    protected logWithSource(message: string, level: 'error' | 'info' | 'warn', { id, output, sourceColumn, sourceFile, sourceLine, }?: {
        id?: string;
        output?: string;
        sourceColumn?: number;
        sourceFile?: string;
        sourceLine?: number;
    }): void;
    protected removeFiles(files: PortablePath[]): Promise<unknown>;
    abstract build(options: BuildOptions): Awaitable;
    abstract getLabel(): string;
    abstract getBuildTargets(): string[];
    abstract getPackageExports(): PackageExports;
}
//# sourceMappingURL=Artifact.d.ts.map