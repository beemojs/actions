import { PackageStructure } from '@boost/common';
declare global {
    const __DEV__: boolean;
}
export declare type Platform = 'browser' | 'native' | 'node';
export declare type Support = 'current' | 'experimental' | 'legacy' | 'stable';
export declare type Environment = `${Platform}:${Support}`;
export declare type CommonFormat = 'lib';
export declare type BrowserFormat = CommonFormat | 'esm' | 'umd';
export declare type NativeFormat = CommonFormat;
export declare type NodeFormat = CommonFormat | 'cjs' | 'mjs';
export declare type Format = BrowserFormat | NodeFormat;
export declare type AnalyzeType = 'network' | 'none' | 'sunburst' | 'treemap';
export declare type DeclarationType = 'api' | 'none' | 'standard';
export declare type InputMap = Record<string, string>;
export interface PackemonPackageConfig {
    bundle?: boolean;
    externals?: string[] | string;
    format?: Format | Format[];
    inputs?: InputMap;
    namespace?: string;
    platform?: Platform | Platform[];
    support?: Support;
}
export interface PackemonPackage extends PackageStructure {
    packemon: PackemonPackageConfig | PackemonPackageConfig[];
}
export interface PackageConfig {
    bundle: boolean;
    externals: string[];
    formats: Format[];
    inputs: InputMap;
    namespace: string;
    platform: Platform;
    support: Support;
}
export declare type PackageExportConditions = 'browser' | 'default' | 'import' | 'module' | 'node' | 'react-native' | 'require' | 'types';
export declare type PackageExportPaths = {
    [K in PackageExportConditions]?: PackageExportPaths | string;
};
export declare type PackageExports = Record<string, PackageExportPaths | string>;
export declare type ArtifactState = 'building' | 'failed' | 'passed' | 'pending';
export interface FilterOptions {
    filter?: string;
    filterFormats?: string;
    filterPlatforms?: string;
    skipPrivate?: boolean;
}
export interface BuildOptions extends FilterOptions {
    addEngines?: boolean;
    addExports?: boolean;
    analyze?: AnalyzeType;
    concurrency?: number;
    declaration?: DeclarationType;
    declarationConfig?: string;
    timeout?: number;
}
export interface BuildResultFiles {
    code: string;
    file: string;
}
export interface BuildResult {
    files: BuildResultFiles[];
    time: number;
}
export interface CodeBuild {
    format: Format;
    stats?: {
        size: number;
    };
}
export interface TypesBuild {
    inputFile: string;
    outputName: string;
}
export interface ValidateOptions {
    deps?: boolean;
    engines?: boolean;
    entries?: boolean;
    files?: boolean;
    license?: boolean;
    links?: boolean;
    meta?: boolean;
    people?: boolean;
    skipPrivate?: boolean;
    repo?: boolean;
}
export interface FeatureFlags {
    analyze?: AnalyzeType;
    decorators?: boolean;
    flow?: boolean;
    react?: boolean;
    strict?: boolean;
    typescript?: boolean;
    workspaces?: string[];
}
declare module 'rollup' {
    interface OutputOptions {
        originalFormat?: Format;
    }
}
export declare type InfraType = 'monorepo' | 'polyrepo';
export declare type TemplateType = 'monorepo-package' | 'monorepo' | 'polyrepo-package' | 'polyrepo';
export interface ScaffoldParams {
    author: string;
    template: TemplateType;
    projectName: string;
    packageName: string;
    packagePath?: string;
    repoUrl: string;
    year: number;
}
export declare type Awaitable = Promise<void> | void;
export interface TSConfigStructure {
    options: {
        declarationDir?: string;
        experimentalDecorators?: boolean;
        outDir?: string;
        strict?: boolean;
    };
}
export interface APIExtractorStructure {
    projectFolder: string;
    mainEntryPointFilePath: string;
    dtsRollup: {
        untrimmedFilePath: string;
    };
}
//# sourceMappingURL=types.d.ts.map