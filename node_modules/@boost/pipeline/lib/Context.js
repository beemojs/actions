'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

Object.defineProperty(exports, '__esModule', {
  value: true
});

var common = require('@boost/common');
/* eslint-disable @typescript-eslint/no-unsafe-return */


class Context {
  /**
   * Create a new instance of the current context and shallow clone all properties.
   */
  clone(...args) {
    // @ts-expect-error Allow invalid args
    const context = new this.constructor(...args); // Copy enumerable properties

    Object.keys(this).forEach(key => {
      const prop = key;
      let value = this[prop];

      if (Array.isArray(value)) {
        value = [...value];
      } else if (value instanceof Map) {
        value = new Map(value);
      } else if (value instanceof Set) {
        value = new Set(value);
      } else if (value instanceof Date) {
        value = new Date(value.getTime());
      } else if (common.isObject(value)) {
        if (typeof value.clone === 'function') {
          value = value.clone(); // Dont dereference instances, only plain objects
        } else if (common.isPlainObject(value)) {
          value = _objectSpread({}, value);
        }
      }

      context[prop] = value;
    });
    return context;
  }

}

exports.Context = Context;
//# sourceMappingURL=Context.js.map
