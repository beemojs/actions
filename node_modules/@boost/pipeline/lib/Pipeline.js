'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var kebabCase = require('lodash/kebabCase');

var common = require('@boost/common');

var debug = require('@boost/debug');

var event = require('@boost/event');

var debug$1 = require('./debug.js');

function _interopDefault(e) {
  return e && e.__esModule ? e : {
    'default': e
  };
}

var kebabCase__default = /*#__PURE__*/_interopDefault(kebabCase);

class Pipeline extends common.Contract {
  /**
   * Called after the pipeline executes work units.
   * @category Events
   */

  /**
   * Called before the pipeline executes work units.
   * @category Events
   */

  /**
   * Called before a single work unit is executed.
   * @category Events
   */
  constructor(context, value, options) {
    super(options);
    this.depth = 0;
    this.index = 0;
    this.context = void 0;
    this.debug = void 0;
    this.value = void 0;
    this.onAfterRun = new event.Event('after-run');
    this.onBeforeRun = new event.Event('before-run');
    this.onRunWorkUnit = new event.Event('run-work-unit');
    this.monitorInstance = null;
    this.work = [];
    const name = this.constructor.name;
    this.context = context;
    this.debug = debug.createDebugger(kebabCase__default['default'](name)); // This is technically invalid, but we want to allow optional values.
    // Luckily the input type defaults to `unknown`, so it forces consumers to validate.
    // @ts-expect-error Allow

    this.value = value;
    debug$1.debug('New %S created', name);
  }
  /**
   * Return a list of registered work units for the current pipeline.
   */


  getWorkUnits() {
    return this.work;
  }
  /**
   * Return a unique hierarchical ID.
   */


  get id() {
    return `pipeline[${this.depth}:${this.index}]`;
  }
  /**
   * Monitor all hierarchical pipelines, routines, and tasks being executed,
   * by listening to all applicable events.
   */


  monitor(monitor) {
    this.monitorInstance = monitor.monitor(this);
    return this;
  }

}

exports.Pipeline = Pipeline;
//# sourceMappingURL=Pipeline.js.map
