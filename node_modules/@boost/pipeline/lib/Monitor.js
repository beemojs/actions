'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var event = require('@boost/event');

var Routine = require('./Routine.js');
/* eslint-disable promise/prefer-await-to-callbacks */


class Monitor {
  constructor() {
    this.onPipelineAfterRun = new event.Event('after-run');
    this.onPipelineBeforeRun = new event.Event('before-run');
    this.onPipelineRunWorkUnit = new event.Event('run-work-unit');
    this.onWorkUnitFail = new event.Event('fail');
    this.onWorkUnitPass = new event.Event('pass');
    this.onWorkUnitRun = new event.BailEvent('run');
    this.onWorkUnitSkip = new event.Event('skip');
  }
  /**
   * Monitor events for the provided pipeline, its work units, and all other
   * pipelines and work units down the hierarchical tree.
   */


  monitor(pipeline) {
    pipeline.onAfterRun.listen(() => {
      this.onPipelineAfterRun.emit([pipeline]);
    });
    pipeline.onBeforeRun.listen(input => {
      this.onPipelineBeforeRun.emit([pipeline, input]);
    });
    pipeline.onRunWorkUnit.listen((workUnit, value) => {
      if (workUnit instanceof Routine.Routine) {
        workUnit.setMonitor(this);
      }

      this.onPipelineRunWorkUnit.emit([pipeline, workUnit, value]);
      workUnit.onFail.listen(error => {
        this.onWorkUnitFail.emit([workUnit, error]);
      });
      workUnit.onPass.listen(output => {
        this.onWorkUnitPass.emit([workUnit, output]);
      });
      workUnit.onRun.listen(input => {
        this.onWorkUnitRun.emit([workUnit, input]);
      });
      workUnit.onSkip.listen(input => {
        this.onWorkUnitSkip.emit([workUnit, input]);
      });
    });
    return this;
  }

}

exports.Monitor = Monitor;
//# sourceMappingURL=Monitor.js.map
