'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

Object.defineProperty(exports, '__esModule', {
  value: true
});

var common = require('@boost/common');

var debug = require('@boost/debug');

var internal = require('@boost/internal');

var mergeArray = require('./helpers/mergeArray.js');

var mergeObject = require('./helpers/mergeObject.js');
/* eslint-disable no-await-in-loop */


class Processor extends common.Contract {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  constructor(options) {
    super(options);
    this.debug = void 0;
    this.handlers = {};
    this.debug = debug.createDebugger(['processor', this.options.name]);
  }

  blueprint(predicates) {
    const bool = predicates.bool,
          string = predicates.string;
    return {
      defaultWhenUndefined: bool(true),
      name: string().required().camelCase(),
      validate: bool(true)
    };
  }
  /**
   * Add a handler to process a key-value setting pair.
   */


  addHandler(key, handler) {
    this.debug('Adding process handler for %s', internal.color.symbol(key));
    this.handlers[key] = handler;
    return this;
  }
  /**
   * Return a handler, or null, for the setting key.
   */


  getHandler(key) {
    return this.handlers[key] || null;
  }
  /**
   * Process a list of loaded config files into a single config object.
   * Use the defined process handlers, or the default processing rules,
   * to generate the final config object.
   */


  async process(defaults, configs, blueprint) {
    const _this$options = this.options,
          defaultWhenUndefined = _this$options.defaultWhenUndefined,
          validate = _this$options.validate;

    const config = _objectSpread({}, defaults);

    this.debug('Processing %d configs into a single and final result', configs.length);

    for (const next of configs) {
      // Validate next config object
      if (validate) {
        common.optimal(next.config, blueprint, {
          file: next.path.path()
        });
      } // Merge properties into previous object


      for (const _ref of Object.entries(next.config)) {
        var _ref2 = _slicedToArray(_ref, 2);

        const key = _ref2[0];
        const value = _ref2[1];
        const name = key;
        const nextValue = value;
        const prevValue = config[name];
        const handler = this.getHandler(name);

        if (handler) {
          config[name] = await handler(prevValue, nextValue);
        } else if (common.isObject(prevValue) && common.isObject(nextValue)) {
          config[name] = mergeObject.mergeObject(prevValue, nextValue);
        } else if (Array.isArray(prevValue) && Array.isArray(nextValue)) {
          config[name] = mergeArray.mergeArray(prevValue, nextValue);
        } else {
          config[name] = nextValue;
        } // Reset to default value if undefined is present


        if (config[name] === undefined && defaultWhenUndefined) {
          config[name] = defaults[name];
        }
      }
    }

    return config;
  }

}

exports.Processor = Processor;
//# sourceMappingURL=Processor.js.map
