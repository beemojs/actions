'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var fs = require('fs');

function _interopDefault(e) {
  return e && e.__esModule ? e : {
    'default': e
  };
}

var fs__default = /*#__PURE__*/_interopDefault(fs);

class Cache {
  constructor() {
    this.configDir = void 0;
    this.dirFilesCache = {};
    this.fileContentCache = {};
    this.pkgPath = void 0;
    this.rootDir = void 0;
  }

  async cacheFileContents(path, commit) {
    const key = path.path();
    const cache = this.fileContentCache[key];
    const stats = await fs__default['default'].promises.stat(path.path());

    if (cache && cache.mtime === stats.mtimeMs) {
      return cache.content;
    }

    const content = await commit();
    this.fileContentCache[key] = {
      content,
      exists: true,
      mtime: stats.mtimeMs
    };
    return content;
  }

  async cacheFilesInDir(dir, commit) {
    const key = dir.path();

    if (this.dirFilesCache[key]) {
      return this.dirFilesCache[key];
    }

    const files = await commit();
    this.dirFilesCache[key] = files;
    return files;
  }

  clearFileCache() {
    this.fileContentCache = {};
  }

  clearFinderCache() {
    this.dirFilesCache = {};
  }

  getFileCache(path) {
    return this.fileContentCache[path.path()] || null;
  }

  markMissingFile(path) {
    this.fileContentCache[path.path()] = {
      content: null,
      exists: false,
      mtime: 0
    };
    return this;
  }

}

exports.Cache = Cache;
//# sourceMappingURL=Cache.js.map
