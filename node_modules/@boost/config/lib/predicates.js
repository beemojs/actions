'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var common = require('@boost/common');
/**
 * Create an `optimal` predicate for validating the structure of an "extends" setting.
 */


function createExtendsPredicate(preds = common.predicates) {
  const array = preds.array,
        string = preds.string,
        union = preds.union;
  return union([string().notEmpty(), array(string().notEmpty())], []).notNullable();
}
/**
 * Create an `optimal` predicate for validating the structure of a "plugins" setting.
 */


function createPluginsPredicate(preds = common.predicates) {
  const array = preds.array,
        bool = preds.bool,
        object = preds.object,
        string = preds.string,
        tuple = preds.tuple,
        union = preds.union;
  const pluginOptions = union([bool(), object()], {});
  const pluginSource = string().notEmpty();
  const pluginEntry = tuple([pluginSource, pluginOptions]);
  return union([array(union([pluginSource, pluginEntry], '')), object(pluginOptions).notNullable()], {});
}
/**
 * Create an `optimal` predicate for validating the structure of an "overrides" setting.
 */


function createOverridesPredicate(blueprint, preds = common.predicates) {
  const array = preds.array,
        shape = preds.shape,
        string = preds.string,
        union = preds.union;
  return array(shape({
    exclude: union([string().notEmpty(), array(string().notEmpty())], []),
    include: union([string().notEmpty(), array(string().notEmpty())], []),
    settings: shape(blueprint).notNullable()
  }).exact().notNullable()).notNullable();
}

exports.createExtendsPredicate = createExtendsPredicate;
exports.createOverridesPredicate = createOverridesPredicate;
exports.createPluginsPredicate = createPluginsPredicate;
//# sourceMappingURL=predicates.js.map
