import { PathResolver } from '@boost/common';
import { Debugger } from '@boost/debug';
import { Registry } from './Registry';
import { Pluggable, Source } from './types';
export declare class Loader<Plugin extends Pluggable> {
    readonly debug: Debugger;
    private registry;
    constructor(registry: Registry<Plugin>);
    /**
     * Create a path resolver that will attempt to find a plugin at a defined Node module,
     * based on a list of acceptable plugin module name patterns.
     */
    createResolver(name: Source): PathResolver;
    /**
     * Load a plugin by short name or fully qualified module name, or file path,
     * and with an optional options object.
     */
    load(source: Source, options?: object): Promise<Plugin>;
}
//# sourceMappingURL=Loader.d.ts.map