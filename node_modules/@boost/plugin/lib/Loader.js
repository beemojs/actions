'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

Object.defineProperty(exports, '__esModule', {
  value: true
});

var path = require('path');

var common = require('@boost/common');

var debug = require('@boost/debug');

var internal = require('@boost/internal');

var debug$1 = require('./debug.js');

var PluginError = require('./PluginError.js');

function _interopDefault(e) {
  return e && e.__esModule ? e : {
    'default': e
  };
}

var path__default = /*#__PURE__*/_interopDefault(path);

class Loader {
  constructor(registry) {
    this.debug = void 0;
    this.registry = void 0;
    this.registry = registry;
    this.debug = debug.createDebugger([registry.singularName, 'loader']);
  }
  /**
   * Create a path resolver that will attempt to find a plugin at a defined Node module,
   * based on a list of acceptable plugin module name patterns.
   */
  // eslint-disable-next-line complexity


  createResolver(name) {
    const _this$registry = this.registry,
          typeName = _this$registry.singularName,
          projectName = _this$registry.projectName,
          options = _this$registry.options;
    const resolver = new common.PathResolver(options.resolver);
    const moduleName = name.toLowerCase();
    const modulePattern = common.MODULE_NAME_PART.source;
    const isNotProjectOrType = !moduleName.includes(projectName) && !moduleName.includes(typeName);
    this.debug('Resolving possible %s module using lookup: %s', internal.color.symbol(typeName), name); // Absolute or relative file path

    if (common.isFilePath(name) && (path__default['default'].isAbsolute(name) || name.startsWith('.'))) {
      this.debug('Found a file path: %s', internal.color.filePath(name));
      resolver.lookupFilePath(name); // @scope/project-plugin-name
    } else if (moduleName.match(new RegExp(`^@${modulePattern}/${projectName}-${typeName}-${modulePattern}$`, 'u'))) {
      this.debug('Found an explicit module with custom scope: %s', internal.color.moduleName(moduleName));
      resolver.lookupNodeModule(moduleName); // @project/plugin-name
    } else if (moduleName.match(new RegExp(`^@${projectName}/${typeName}-${modulePattern}$`, 'u'))) {
      this.debug('Found an explicit internal module with scope: %s', internal.color.moduleName(moduleName));
      resolver.lookupNodeModule(moduleName); // @scope/name
    } else if (moduleName.match(new RegExp(`^@${modulePattern}/${modulePattern}$`, 'u')) && isNotProjectOrType) {
      const _moduleName$split = moduleName.split('/'),
            _moduleName$split2 = _slicedToArray(_moduleName$split, 2),
            scope = _moduleName$split2[0],
            customName = _moduleName$split2[1];

      const customModuleName = `${scope}/${projectName}-${typeName}-${customName}`;
      this.debug('Found a shorthand module with custom scope: %s', internal.color.moduleName(moduleName));
      resolver.lookupNodeModule(customModuleName); // project-plugin-name
    } else if (moduleName.match(new RegExp(`^${projectName}-${typeName}-${modulePattern}$`, 'u'))) {
      this.debug('Found an explicit public module: %s', internal.color.moduleName(moduleName));
      resolver.lookupNodeModule(moduleName); // The previous 2 patterns if only name provided
    } else if (moduleName.match(new RegExp(`^${modulePattern}$`, 'u')) && isNotProjectOrType) {
      this.debug('Resolving module with internal %s scope or public %s prefix', internal.color.projectName(`@${projectName}`), internal.color.projectName(projectName)); // Detect internal scopes before public ones

      resolver.lookupNodeModule(this.registry.formatModuleName(moduleName, true));
      resolver.lookupNodeModule(this.registry.formatModuleName(moduleName)); // Unknown plugin module pattern
    } else {
      throw new PluginError.PluginError('MODULE_UNKNOWN_FORMAT', [moduleName]);
    }

    debug$1.debug('Loading plugins from: %s', resolver.getLookupPaths().join(', '));
    return resolver;
  }
  /**
   * Load a plugin by short name or fully qualified module name, or file path,
   * and with an optional options object.
   */


  async load(source, options = {}) {
    const _this$createResolver$ = this.createResolver(source).resolve(),
          originalPath = _this$createResolver$.originalPath,
          resolvedPath = _this$createResolver$.resolvedPath;

    this.debug('Loading %s from %s', internal.color.moduleName(source), internal.color.filePath(resolvedPath));
    const factory = common.requireModule(resolvedPath);

    if (typeof factory !== 'function') {
      throw new PluginError.PluginError('FACTORY_REQUIRED', [typeof factory]);
    }

    const plugin = await factory(options);

    if (common.isObject(plugin) && !plugin.name) {
      // @ts-expect-error Allow this
      plugin.name = originalPath.path();
    }

    return plugin;
  }

}

exports.Loader = Loader;
//# sourceMappingURL=Loader.js.map
