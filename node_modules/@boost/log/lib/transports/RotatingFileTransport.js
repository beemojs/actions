'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

Object.defineProperty(exports, '__esModule', {
  value: true
});

var FileTransport = require('./FileTransport.js');

const DAYS_IN_WEEK = 7;

class RotatingFileTransport extends FileTransport.FileTransport {
  constructor(...args) {
    super(...args);
    this.lastTimestamp = this.formatTimestamp(Date.now());
  }

  blueprint(predicates) {
    const string = predicates.string;
    return _objectSpread(_objectSpread({}, super.blueprint(predicates)), {}, {
      rotation: string().oneOf(['hourly', 'daily', 'weekly', 'monthly'])
    });
  }
  /**
   * Format a `Date` object into a format used within the log file name.
   */


  formatTimestamp(ms) {
    const rotation = this.options.rotation;
    const date = new Date(ms);
    let timestamp = `${date.getFullYear()}${String(date.getMonth() + 1).padStart(2, '0')}`;

    if (rotation === 'monthly') {
      return timestamp;
    } // Special case, calculate the week manually and return,
    // but do not append so other rotations inherit!


    if (rotation === 'weekly') {
      const firstDay = new Date(date.getFullYear(), date.getMonth(), 1).getDay();
      const offsetDate = date.getDate() + firstDay - 1;
      timestamp += `.W${Math.floor(offsetDate / DAYS_IN_WEEK) + 1}`;
      return timestamp;
    }

    timestamp += String(date.getDate()).padStart(2, '0');

    if (rotation === 'daily') {
      return timestamp;
    }

    timestamp += `.${String(date.getHours()).padStart(2, '0')}`;
    return timestamp;
  }
  /**
   * @inheritdoc
   */


  checkIfNeedsRotation() {
    if (this.lastSize > this.options.maxSize || this.formatTimestamp(Date.now()) !== this.lastTimestamp) {
      this.closeStreamAndRotateFile();
    }
  }
  /**
   * @inheritdoc
   */


  getRotatedFileName() {
    const name = this.path.name(true);
    const ext = this.path.ext(true);
    return `${name}-${this.lastTimestamp}.${ext}`;
  }
  /**
   * @inheritdoc
   */


  rotateFile() {
    super.rotateFile(); // Update timestamp to the new format

    this.lastTimestamp = this.formatTimestamp(Date.now());
  }

}

exports.RotatingFileTransport = RotatingFileTransport;
//# sourceMappingURL=RotatingFileTransport.js.map
