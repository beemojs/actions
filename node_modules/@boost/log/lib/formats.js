'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

Object.defineProperty(exports, '__esModule', {
  value: true
});

function formatMetadata(metadata) {
  const items = [];
  const keys = Object.keys(metadata).sort();
  keys.forEach(key => {
    items.push(`${key}=${metadata[key]}`);
  });
  return `(${items.join(', ')})`;
}
/**
 * Format the item as if it's being logged to `console`.
 * _Only_ inclues the label and message.
 */


function console(item) {
  let output = item.message;

  if (item.level !== 'log') {
    output = `${item.label} ${output}`;
  }

  return output;
}
/**
 * Format the item into a human-readable message with all item fields included.
 * This is the default format for most transports.
 */


function debug(item) {
  return `[${item.time.toISOString()}] ${item.level.toUpperCase()} ${item.message} ${formatMetadata(_objectSpread(_objectSpread({}, item.metadata), {}, {
    host: item.host,
    name: item.name,
    pid: item.pid
  }))}`;
}
/**
 * Format the entire item into JSON.
 */


function json(item) {
  return JSON.stringify(item);
}
/**
 * Format the item using _only_ the message.
 */


function message(item) {
  return item.message;
}

exports.console = console;
exports.debug = debug;
exports.json = json;
exports.message = message;
//# sourceMappingURL=formats.js.map
