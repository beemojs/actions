'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var coreDebug = require('debug');

var common = require('@boost/common');

var internal = require('@boost/internal');

var debug = require('./debug.js');

function _interopDefault(e) {
  return e && e.__esModule ? e : {
    'default': e
  };
}

var coreDebug__default = /*#__PURE__*/_interopDefault(coreDebug);
/**
 * Create and return a `Debugger` instance with the defined namespace.
 */


function createDebugger(namespace) {
  const globalNamespace = internal.env('DEBUG_NAMESPACE');
  const namespaces = common.toArray(namespace);

  if (globalNamespace) {
    namespaces.unshift(globalNamespace);
  }

  const mainNamespace = namespaces.join(':');
  debug.debug('New debugger created: %s %s', mainNamespace, internal.env('DEBUG_VERBOSE') ? '(verbose enabled)' : '');
  const logger = coreDebug__default['default'](mainNamespace); // `debug` doesn't support this on an individual namespace basis,
  // so we have to manually support it using this hacky regex.

  logger.disable = () => {
    var _process$env$DEBUG;

    debug.debug('Debugger %s disabled', mainNamespace);
    process.env.DEBUG = ((_process$env$DEBUG = process.env.DEBUG) !== null && _process$env$DEBUG !== void 0 ? _process$env$DEBUG : '').replace(new RegExp(`${logger.namespace}(:\\*)?`, 'u'), '').replace(/(^,)|(,$)/u, '').replace(',,', ',');
  };

  logger.enable = () => {
    debug.debug('Debugger %s enabled', mainNamespace);
    coreDebug__default['default'].enable(mainNamespace);
  };

  logger.invariant = (condition, message, pass, fail) => {
    logger('%s: %s', message, condition ? internal.color.pass(pass) : internal.color.fail(fail));
  };

  logger.verbose = (message, ...args) => {
    if (internal.env('DEBUG_VERBOSE')) {
      logger(message, ...args);
    }
  };

  return logger;
}

exports.createDebugger = createDebugger;
//# sourceMappingURL=createDebugger.js.map
