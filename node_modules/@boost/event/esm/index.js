function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Bundled with Packemon: https://packemon.dev
// Platform: browser, Support: legacy, Format: esm
import { createInternalDebugger, createScopedError } from '@boost/internal';
var WILDCARD_SCOPE = '*';
var EVENT_NAME_PATTERN = /^[a-z]{1}[\x2D\.0-9a-z]*[a-z]{1}$/;
var debug = createInternalDebugger('event');
var errors = {
  LISTENER_INVALID: 'Invalid event listener for "{0}", must be a function.',
  NAME_INVALID: 'Invalid event {0} "{1}". May only contain dashes, periods, and lowercase characters.'
};
var EventError = createScopedError('EVT', 'EventError', errors);

var BaseEvent = /*#__PURE__*/function () {
  function BaseEvent(name) {
    _classCallCheck(this, BaseEvent);

    this.listeners = new Map();
    this.name = void 0;
    this.name = this.validateName(name, 'name');

    if (process.env.NODE_ENV !== "production") {
      debug('New %S created: %s', this.constructor.name, name);
    }
  }
  /**
   * Remove all listeners from the event.
   */


  _createClass(BaseEvent, [{
    key: "clearListeners",
    value: function clearListeners(scope) {
      if (scope) {
        this.getListeners(scope).clear();
      } else {
        this.listeners.clear();
      }

      return this;
    }
    /**
     * Return a set of listeners for a specific event scope.
     */

  }, {
    key: "getListeners",
    value: function getListeners(scope) {
      var key = this.validateName(scope !== null && scope !== void 0 ? scope : WILDCARD_SCOPE, 'scope');

      if (!this.listeners.has(key)) {
        this.listeners.set(key, new Set());
      }

      return this.listeners.get(key);
    }
    /**
     * Return a list of all scopes with listeners.
     */

  }, {
    key: "getScopes",
    value: function getScopes() {
      return _toConsumableArray(this.listeners.keys());
    }
    /**
     * Register a listener to the event.
     */

  }, {
    key: "listen",
    value: function listen(listener, scope) {
      var _this = this;

      if (process.env.NODE_ENV !== "production") {
        debug('Registering "%s" listener', this.name);
      }

      this.getListeners(scope).add(this.validateListener(listener));
      return function () {
        _this.unlisten(listener, scope);
      };
    }
    /**
     * Register a listener to the event that only triggers once.
     */

  }, {
    key: "once",
    value: function once(listener, scope) {
      var _this2 = this;

      var func = this.validateListener(listener);

      var handler = function handler() {
        _this2.unlisten(handler);

        return func.apply(void 0, arguments);
      };

      return this.listen(handler, scope);
    }
    /**
     * Remove a listener from the event.
     */

  }, {
    key: "unlisten",
    value: function unlisten(listener, scope) {
      if (process.env.NODE_ENV !== "production") {
        debug('Unregistering "%s" listener', this.name);
      }

      this.getListeners(scope).delete(listener);
      return this;
    }
    /**
     * Validate the listener is a function.
     */

  }, {
    key: "validateListener",
    value: function validateListener(listener) {
      if (process.env.NODE_ENV !== "production" && typeof listener !== 'function') {
        throw new EventError('LISTENER_INVALID', [this.name]);
      }

      return listener;
    }
    /**
     * Validate the name/scope match a defined pattern.
     */

  }, {
    key: "validateName",
    value: function validateName(name, type) {
      if (type === 'scope' && name === WILDCARD_SCOPE) {
        return name;
      }

      if (process.env.NODE_ENV !== "production" && !name.match(EVENT_NAME_PATTERN)) {
        throw new EventError('NAME_INVALID', [type, name]);
      }

      return name;
    }
    /**
     * Emit the event by executing all scoped listeners with the defined arguments.
     */

  }]);

  return BaseEvent;
}();

var BailEvent = /*#__PURE__*/function (_BaseEvent) {
  _inherits(BailEvent, _BaseEvent);

  var _super = _createSuper(BailEvent);

  function BailEvent() {
    _classCallCheck(this, BailEvent);

    return _super.apply(this, arguments);
  }

  _createClass(BailEvent, [{
    key: "emit",
    value:
    /**
     * Synchronously execute listeners with the defined arguments.
     * If a listener returns `false`, the loop with be aborted early,
     * and the emitter will return `true` (for bailed).
     */
    function emit(args, scope) {
      if (process.env.NODE_ENV !== "production") {
        debug('Emitting "%s%s" as bail', this.name, scope ? ":".concat(scope) : '');
      }

      return _toConsumableArray(this.getListeners(scope)).some(function (listener) {
        return listener.apply(void 0, _toConsumableArray(args)) === false;
      });
    }
  }]);

  return BailEvent;
}(BaseEvent);

var ConcurrentEvent = /*#__PURE__*/function (_BaseEvent2) {
  _inherits(ConcurrentEvent, _BaseEvent2);

  var _super2 = _createSuper(ConcurrentEvent);

  function ConcurrentEvent() {
    _classCallCheck(this, ConcurrentEvent);

    return _super2.apply(this, arguments);
  }

  _createClass(ConcurrentEvent, [{
    key: "emit",
    value:
    /**
     * Asynchronously execute listeners for with the defined arguments.
     * Will return a promise with an array of each listener result.
     */
    function emit(args, scope) {
      try {
        var _this4 = this;

        if (process.env.NODE_ENV !== "production") {
          debug('Emitting "%s%s" as concurrent', _this4.name, scope ? ":".concat(scope) : '');
        }

        return Promise.all(_toConsumableArray(_this4.getListeners(scope)).map(function (listener) {
          return listener.apply(void 0, _toConsumableArray(args));
        }));
      } catch (e) {
        return Promise.reject(e);
      }
    }
  }]);

  return ConcurrentEvent;
}(BaseEvent);

var Event = /*#__PURE__*/function (_BaseEvent3) {
  _inherits(Event, _BaseEvent3);

  var _super3 = _createSuper(Event);

  function Event() {
    _classCallCheck(this, Event);

    return _super3.apply(this, arguments);
  }

  _createClass(Event, [{
    key: "emit",
    value:
    /**
     * Synchronously execute listeners with the defined arguments.
     */
    function emit(args, scope) {
      _toConsumableArray(this.getListeners(scope)).forEach(function (listener) {
        listener.apply(void 0, _toConsumableArray(args));
      });
    }
  }]);

  return Event;
}(BaseEvent);

var WaterfallEvent = /*#__PURE__*/function (_BaseEvent4) {
  _inherits(WaterfallEvent, _BaseEvent4);

  var _super4 = _createSuper(WaterfallEvent);

  function WaterfallEvent() {
    _classCallCheck(this, WaterfallEvent);

    return _super4.apply(this, arguments);
  }

  _createClass(WaterfallEvent, [{
    key: "emit",
    value:
    /**
     * Synchronously execute listeners with the defined argument value.
     * The return value of each listener will be passed as an argument to the next listener.
     */
    function emit(arg, scope) {
      if (process.env.NODE_ENV !== "production") {
        debug('Emitting "%s%s" as waterfall', this.name, scope ? ":".concat(scope) : '');
      }

      return _toConsumableArray(this.getListeners(scope)).reduce(function (nextValue, listener) {
        return listener(nextValue);
      }, arg);
    }
  }]);

  return WaterfallEvent;
}(BaseEvent);

export { BailEvent, BaseEvent, ConcurrentEvent, EVENT_NAME_PATTERN, Event, EventError, WILDCARD_SCOPE, WaterfallEvent };
//# sourceMappingURL=index.js.map
