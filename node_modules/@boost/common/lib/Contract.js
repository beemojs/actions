'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

Object.defineProperty(exports, '__esModule', {
  value: true
});

var optimal = require('optimal');

function _interopDefault(e) {
  return e && e.__esModule ? e : {
    'default': e
  };
}

var optimal__default = /*#__PURE__*/_interopDefault(optimal);

class Contract {
  /** Validated and configured options. */
  constructor(options) {
    this.options = void 0;
    this.options = this.configure(options);
  }
  /**
   * Set an options object by merging the new partial and existing options
   * with the defined blueprint, while running all validation checks.
   * Freeze and return the options object.
   *
   * ```ts
   * object.configure({ name: 'Boost' });
   *
   * object.configure((prevOptions) => ({
   * 	nestedObject: {
   * 		...prevOptions.nestedObject,
   * 		some: 'value',
   * 	},
   * }));
   * ```
   */


  configure(options) {
    const nextOptions = typeof options === 'function' ? options(this.options) : options; // We don't want the options property to be modified directly,
    // so it's read only, but we still want to modify it with this function.
    // @ts-expect-error Allow readonly overwrite

    this.options = Object.freeze(optimal__default['default'](_objectSpread(_objectSpread({}, this.options), nextOptions), this.blueprint(optimal.predicates, this.options === undefined), {
      name: this.constructor.name
    }));
    return this.options;
  }
  /**
   * Define an `optimal` blueprint in which to validate and build the
   * options object passed to the constructor, or when manual setting.
   *
   * A boolean is passed as the 2nd argument to determine whether this is
   * validating on class instantiation (first time), or by calling
   * `configure()` (all other times).
   */


}

exports.Contract = Contract;
//# sourceMappingURL=Contract.js.map
