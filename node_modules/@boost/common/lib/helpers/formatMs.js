'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

Object.defineProperty(exports, '__esModule', {
  value: true
});

var prettyMs = require('pretty-ms');

function _interopDefault(e) {
  return e && e.__esModule ? e : {
    'default': e
  };
}

var prettyMs__default = /*#__PURE__*/_interopDefault(prettyMs);
/**
 * Can be used to format a UNIX timestamp in milliseconds into a shorthand human readable format.
 * Wraps the [pretty-ms](https://www.npmjs.com/package/pretty-ms) package to handle infinite
 * numbers, zeros, and more.
 *
 * ```ts
 * import { formatMs } from '@boost/common';
 *
 * formatMs(1337000000); // 15d 11h 23m 20s
 * ```
 */


function formatMs(ms, options) {
  if (!Number.isFinite(ms) || ms === 0) {
    return '0s';
  }

  return prettyMs__default['default'](ms, _objectSpread({
    keepDecimalsOnWholeSeconds: true
  }, options));
}

exports.formatMs = formatMs;
//# sourceMappingURL=formatMs.js.map
