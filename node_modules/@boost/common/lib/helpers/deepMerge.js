'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

Object.defineProperty(exports, '__esModule', {
  value: true
});

var isObject = require('./isObject.js');

function merge(prev, next) {
  const base = prev;
  Object.entries(next).forEach(([key, value]) => {
    const prevValue = base[key];

    if (isObject.isObject(prevValue) && isObject.isObject(value)) {
      base[key] = merge(_objectSpread({}, prevValue), value);
    } else if (Array.isArray(prevValue) && Array.isArray(value)) {
      base[key] = merge([...prevValue], value);
    } else {
      base[key] = value;
    }
  });
  return base;
}
/**
 * Can be used to recursively merge objects and arrays, where values on the
 * right-hand side will overwrite values on the left-hand based on the key
 * or index respectively. Furthermore, if the 2nd argument is not provided,
 * it will simply clone the base value.
 *
 * ```ts
 * import { deepMerge } from '@boost/common';
 *
 * const obj = deepMerge({ foo: 123, bar: 'abc' }, { foo: 456, baz: true });
 *
 * // -> { foo: 456, bar: 'abc', baz: true }
 * ```
 */


function deepMerge(base, other) {
  const next = Array.isArray(base) ? merge([], base) : merge({}, base);

  if (other) {
    merge(next, other);
  }

  return next;
}

exports.deepMerge = deepMerge;
//# sourceMappingURL=deepMerge.js.map
