'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var module$1 = require('module');

var constants = require('../constants.js');

const RESERVED = new Set([...module$1.builtinModules, 'node_modules', 'favicon.ico']);
/**
 * Returns `true` if a string is a valid Node module package name,
 * according to the rules defined in
 * [validate-npm-package-name](https://github.com/npm/validate-npm-package-name).
 * Will `return` false for native builtin modules, like `fs`, and for the old name format.
 *
 * ```ts
 * import { isModuleName } from '@boost/common';
 *
 * isModuleName('boost'); // true
 * isModuleName('@boost/common'); // true
 * isModuleName('fs'); // false
 * ```
 */

function isModuleName(name) {
  if (RESERVED.has(name)) {
    return false;
  }

  return constants.MODULE_NAME_PATTERN.test(name);
}

exports.isModuleName = isModuleName;
//# sourceMappingURL=isModuleName.js.map
