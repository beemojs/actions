'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var fs = require('fs');

var CommonError = require('../CommonError.js');

var Path = require('../Path.js');

var json = require('../serializers/json.js');

var yaml = require('../serializers/yaml.js');

var requireModule = require('./requireModule.js');

var requireTypedModule = require('./requireTypedModule.js');

function _interopDefault(e) {
  return e && e.__esModule ? e : {
    'default': e
  };
}

var fs__default = /*#__PURE__*/_interopDefault(fs);
/**
 * Can be used to *sync*hronously parse and return an object for the following
 * file types & extensions: `js`, `ts`, `tsx`, `json`, `json5`, `yaml`, `yml`.
 * The function requires an absolute file path, and any unsupported file type will throw an error.
 *
 * ```ts
 * import { parseFile } from '@boost/common';
 *
 * const data: ReturnShape = parseFile('/absolute/file/path');
 * ```
 *
 * > TypeScript files require the `typescript` package to be installed.
 */


function parseFile(filePath) {
  const path = Path.Path.create(filePath);

  if (!path.isAbsolute()) {
    throw new CommonError.CommonError('PATH_REQUIRE_ABSOLUTE');
  }

  switch (path.ext()) {
    case '.js':
    case '.jsx':
      return requireModule.requireModule(path);

    case '.ts':
    case '.tsx':
      return requireTypedModule.requireTypedModule(path);

    case '.json':
    case '.json5':
      return json.parse(fs__default['default'].readFileSync(path.path(), 'utf8'));

    case '.yml':
    case '.yaml':
      return yaml.parse(fs__default['default'].readFileSync(path.path(), 'utf8'));

    default:
      throw new CommonError.CommonError('PARSE_INVALID_EXT', [path.name()]);
  }
}

exports.parseFile = parseFile;
//# sourceMappingURL=parseFile.js.map
