export declare type MergableArray = unknown[];
export declare type MergableObject = Record<string, unknown>;
export declare type Mergeable = MergableArray | MergableObject;
export declare type InferMergeable<T> = T extends unknown[] ? MergableArray : T extends object ? MergableObject : never;
/**
 * Can be used to recursively merge objects and arrays, where values on the
 * right-hand side will overwrite values on the left-hand based on the key
 * or index respectively. Furthermore, if the 2nd argument is not provided,
 * it will simply clone the base value.
 *
 * ```ts
 * import { deepMerge } from '@boost/common';
 *
 * const obj = deepMerge({ foo: 123, bar: 'abc' }, { foo: 456, baz: true });
 *
 * // -> { foo: 456, bar: 'abc', baz: true }
 * ```
 */
export declare function deepMerge<T extends Mergeable, V extends InferMergeable<T>>(base: T, other?: V): T;
//# sourceMappingURL=deepMerge.d.ts.map