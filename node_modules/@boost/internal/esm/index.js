function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

// Bundled with Packemon: https://packemon.dev
// Platform: browser, Support: legacy, Format: esm
import debug from 'debug';
/* eslint-disable no-magic-numbers, sort-keys */
// https://github.com/chalk/ansi-styles/blob/master/index.js#L75

function createColor(open) {
  return function (message) {
    return "\x1B[".concat(open, "m").concat(String(message), "\x1B[39m");
  };
}

var color = {
  // States
  fail: createColor(31),
  mute: createColor(90),
  pass: createColor(32),
  // Types
  filePath: createColor(36),
  moduleName: createColor(33),
  projectName: createColor(34),
  symbol: createColor(35)
};

function sentenceCase(value) {
  return String(value).replace(/[A-Z]/g, function (match) {
    return " ".concat(match.toLocaleLowerCase());
  }).trim();
}

debug.formatters.S = sentenceCase;

function createInternalDebugger(namespace) {
  return debug("boost:".concat(namespace));
}

var internalErrors = {
  INVALID_SCOPE_NAME: 'Error scope must be 3 characters and all uppercase.',
  UNKNOWN_ERROR: 'An unknown error has occurred.'
};
var TOKEN_PATTERN = /\{([0-9]+)\}/g;

function createScopedError(scope, name, errors) {
  function msg(code, messages) {
    var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

    if (!messages[code]) {
      return '';
    }

    return "".concat(messages[code].replace(TOKEN_PATTERN, function (match, index) {
      return String(params[index]);
    }), " [").concat(scope, ":").concat(code, "]");
  }

  if (process.env.NODE_ENV !== "production" && (scope.length !== 3 || scope !== scope.toUpperCase())) {
    throw new Error(msg('INVALID_SCOPE_NAME', internalErrors));
  }

  return /*#__PURE__*/function (_Error) {
    _inherits(InternalError, _Error);

    var _super = _createSuper(InternalError);

    function InternalError(code, params) {
      var _this;

      _classCallCheck(this, InternalError);

      _this = _super.call(this, msg(code, errors, params));
      _this.code = void 0;
      _this.scope = scope;
      _this.code = code;
      _this.name = name; // If a message was not loaded, we are throwing an unknown error

      if (!_this.message) {
        _this.code = 'UNKNOWN_ERROR';
        _this.message = msg('UNKNOWN_ERROR', internalErrors);
      }

      return _this;
    }

    return InternalError;
  }( /*#__PURE__*/_wrapNativeSuper(Error));
}

var envVars = {};

if (typeof global.process !== 'undefined') {
  envVars = process.env;
} else if (typeof global.window !== 'undefined') {
  // @ts-expect-error Allow type mismatch
  envVars = window;
}

function env(key, value) {
  var name = "BOOSTJS_".concat(key);

  if (value === null) {
    delete envVars[name];
    return undefined;
  }

  if (typeof value === 'string') {
    envVars[name] = value;
    return value;
  }

  return envVars[name];
}

export { color, createInternalDebugger, createScopedError, env, sentenceCase };
//# sourceMappingURL=index.js.map
